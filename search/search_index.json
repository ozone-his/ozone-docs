{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"auto-eip-config-points/","title":"<span style='color:36464e'>Configure Integrations","text":""},{"location":"auto-eip-config-points/#configure-integrations","title":"Configure Integrations","text":"<p>In this section, we provide a comprehensive list of configuration points available in to configure the integrations between apps in Ozone, organized by EIP services and thereby grouped by pairs of apps.</p>"},{"location":"auto-eip-config-points/#odoo-openmrs-flows","title":"Odoo-OpenMRS Flows","text":"<p>Name: <code>eip.fhir.resources</code></p> <p>Description: List of FHIR resources the EIP route should listen to</p> <p>Possible Values: <code>Patient</code>, <code>ServiceRequest</code>, <code>MedicationRequest</code>, <code>Encounter</code>, <code>Observation</code>, <code>Procedure</code>, <code>SupplyRequest</code> (Should be comma separated)</p> <p>Default Value: <code>Patient</code>, <code>ServiceRequest</code>, <code>MedicationRequest</code></p> <p>Name: <code>odoo.openmrs.enable.patient.sync</code></p> <p>Description: Whether to enable the patient sync feature. If enabled, patient data will be synchronized between OpenMRS and Odoo</p> <p>Possible Values: <code>true</code> or <code>false</code></p> <p>Default Value: <code>false</code></p> <p>Sample configuration:</p> <pre><code>odoo.openmrs.enable.patient.sync=false\n</code></pre> <p>Name: <code>eip.weight.concept</code></p> <p>Description: Weight Concept uuid configured in OpenMRS</p> <p>Possible Values: Any concept uuid, should be configured in OpenMRS and Odoo</p> <p>Default Value: <code>5089AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</code></p> <p>Name: <code>eip.odoo.customer.weight.field</code></p> <p>Description: Enables sync of Patient weight from OpenMRS to Odoo</p> <p>Possible Values: Any string field, should be configured in Odoo</p> <p>Default Value: <code>x_customer_weight</code></p> <p>Name: <code>odoo.customer.dob.field</code></p> <p>Description: Enables sync of Patient date of birth from OpenMRS to Odoo</p> <p>Possible Values: Any string field, should be configured in Odoo</p> <p>Default Value: <code>x_customer_dob</code></p> <p>Name: <code>odoo.customer.id.field</code></p> <p>Description: Enables sync of Patient id from OpenMRS to Odoo</p> <p>Possible Values: Any string field, should be configured in Odoo</p> <p>Default Value: <code>x_external_identifier</code></p>"},{"location":"auto-eip-config-points/#openmrs-senaite-flows","title":"OpenMRS-SENAITE Flows","text":"<p>Name: <code>eip.fhir.resources</code></p> <p>Description: List of FHIR resources the EIP route should listen to</p> <p>Possible Values: <code>Patient</code>, <code>ServiceRequest</code>, <code>MedicationRequest</code>, <code>Encounter</code>, <code>Observation</code>, <code>Procedure</code>, <code>SupplyRequest</code> (Should be comma separated)</p> <p>Default Value: <code>Patient</code>, <code>ServiceRequest</code></p> <p>Name: <code>openmrs.senaite.enable.patient.sync</code></p> <p>Description: Whether to enable the patient sync feature. If enabled, patient data will be synchronized between OpenMRS and SENAITE</p> <p>Possible Values: <code>true</code> or <code>false</code></p> <p>Default Value: <code>false</code></p> <p>Sample configuration:</p> <pre><code>openmrs.senaite.enable.patient.sync=false\n</code></pre>"},{"location":"auto-eip-config-points/#erpnext-openmrs-flows","title":"ERPNext-OpenMRS Flows","text":"<p>Name: <code>eip.fhir.resources</code></p> <p>Description: List of FHIR resources the EIP route should listen to</p> <p>Possible Values: <code>Patient</code>, <code>Encounter</code>, <code>Observation</code>, <code>Procedure</code>, <code>SupplyRequest</code> (Should be comma separated)</p> <p>Default Value: <code>Patient</code>, <code>Encounter</code>, <code>Observation</code></p> <p>Name: <code>erpnext.openmrs.enable.patient.sync</code></p> <p>Description: Whether to enable the patient sync feature. If enabled, patient data will be synchronized between OpenMRS and SENAITE</p> <p>Possible Values: <code>true</code> or <code>false</code></p> <p>Default Value: <code>false</code></p> <p>Sample configuration:</p> <pre><code>erpnext.openmrs.enable.patient.sync=false\n</code></pre>"},{"location":"auto-eip-config-points/#openmrs-orthanc-flows","title":"OpenMRS-Orthanc Flows","text":"<p>Name: <code>eip.fhir.resources</code></p> <p>Description: List of FHIR resources the EIP route should listen to</p> <p>Possible Values: <code>Patient</code>, <code>Encounter</code>, <code>Observation</code> (Should be comma separated)</p> <p>Default Value: <code>Patient</code>, <code>Encounter</code>, <code>Observation</code></p> <p>Sample configuration:</p> <pre><code>eip.fhir.resources=Patient\n</code></pre> <p>Name: <code>eip.attachment.concept</code></p> <p>Description: Attachment Concept uuid configured in OpenMRS</p> <p>Possible Values: Any concept uuid, should be configured in OpenMRS</p> <p>Default Value: <code>7cac8397-53cd-4f00-a6fe-028e8d743f8</code></p>"},{"location":"analytics/","title":"Ozone Analytics","text":""},{"location":"devs/","title":"Architecture Overview","text":"<p>This section of the Ozone Docs is designed for software architects, engineers, and developers. It provides comprehensive information on Ozone's architecture, guides on integrating new software apps, and technical advice on developing within Ozone.</p>"},{"location":"devs/#architecture-overview","title":"Architecture Overview","text":""},{"location":"devs/#ozone-platform","title":"Ozone Platform","text":"<p>The Ozone Platform serves as the interoperability layer that seamlessly integrates HIS apps by enabling data flows of FHIR resources between them:</p> <p> </p> HIS apps glued with configurable data flows. <p>Ozone Platform is a decenstralised mesh of peer-to-peer interoperability services, each an instance of Ozone's EIP Client.</p> <p>Each service connects a pair of HIS apps of Ozone's digital health sofware suite:</p> <p> </p> Mesh of point-to-point services integrating apps within the HIS."},{"location":"devs/#ozones-eip-client","title":"Ozone's EIP Client","text":"<p>The core of the Ozone Platform is powered by the EIP<sup>1</sup> Client, a Spring Boot application that runs Apache Camel routes. This application acts as the ETL<sup>2</sup> agent between two apps of the HIS.</p> <p> </p> Point-to-point service between two apps of the HIS. <p>The EIP Client facilitates the exchange of FHIR resources between two apps of Ozone's digital health software suite. This exchange of FHIR resources is precisely what makes the data flows of Ozone HIS.</p> <p>Development in Ozone primarily involves assembling peer-to-peer services using the EIP Client. This client is equipped with several built-in features, simplifying the development process:</p> <ul> <li>It's a ready-to-use application designed for implementing Camel routes.</li> <li> <p>It manages authentication:</p> <ul> <li>With Ozone's HIS apps.</li> <li>With Ozone's Identity Provider (IdP).</li> </ul> </li> <li> <p>It includes a variety of common libraries to implement data flows that can be reused across different services.</p> </li> </ul>"},{"location":"devs/#missing-fhir-apis","title":"Missing FHIR APIs","text":"<p>Many software apps do not provide a FHIR API, often because they are not healthcare-specific, such as ERP systems. When this occurs, there are two possible solutions:</p>"},{"location":"devs/#1-lobby-for-the-inclusion-of-a-fhir-api","title":"1 \u00a0 Lobby for the inclusion of a FHIR API","text":"<p>The ideal solution is to advocate for the software editor or development community to include a FHIR API as part of the software itself.</p> <p>Generally, this can be achieved gradually with minimal effort by focusing on the subset of FHIR resources most needed to accomplish the desired flows within the Ozone HIS. Often, only a couple of resources are required, and not all operations need to be supported for those resources.</p>"},{"location":"devs/#2-development-of-a-camel-fhir-facade","title":"2 \u00a0 Development of a Camel FHIR facade","text":"<p>When advocating for a FHIR API inclusion is not feasible or unsuccessful, an alternative solution is to develop a FHIR facade using Camel. This approach involves introducing the necessary FHIR resources via a new Camel component that extends the existing software from the outside.</p> <ol> <li> <p>Enterprise Integration Patterns\u00a0\u21a9</p> </li> <li> <p>Extract, Transform, Load\u00a0\u21a9</p> </li> </ol>"},{"location":"devs/camel-components/","title":"<span style='color:#b0b0b0;font-style:italic'>Camel Components</span>","text":""},{"location":"devs/camel-components/#camel-components","title":"Camel Components","text":"<p>Coming soon:</p> <ul> <li>Listing the Camel components developed for Ozone HIS.</li> <li>Detailing those Camel components.</li> <li>Guiding developers through those components.</li> </ul>"},{"location":"devs/camel-components/#camel-frappe","title":"<code>camel-frappe</code>","text":""},{"location":"devs/camel-components/#camel-openmrs-fhir","title":"<code>camel-openmrs-fhir</code>","text":""},{"location":"devs/conventions/","title":"<span style='color:#b0b0b0;font-style:italic'>Conventions</span>","text":""},{"location":"devs/conventions/#conventions","title":"Conventions","text":"<p>Coming soon:</p> <ul> <li>Listing our conventions, organized by the type and grouped by app/service.</li> <li>Code Conventions.</li> </ul>"},{"location":"devs/conventions/#naming","title":"Naming","text":""},{"location":"devs/conventions/#eip-service","title":"EIP Service","text":"<ul> <li>Should be named in the format <code>eip-&lt;a&gt;-&lt;b&gt;</code>. Where <code>&lt;a&gt;</code> and <code>&lt;b&gt;</code> are the names of the two systems being integrated, in alphabetical order. For example, <code>eip-erpnext-openmrs</code>.</li> <li>The name should be in lowercase and use hyphens to separate words.</li> <li>The preceding name should be used for (whenever possible):<ul> <li>GitHub repository name.</li> <li>Docker Compose service.</li> <li>Configuration directory.</li> <li>Configuration properties file.</li> <li>Maven artifact ID.</li> </ul> </li> </ul>"},{"location":"devs/conventions/#code-conventions","title":"Code Conventions","text":""},{"location":"devs/conventions/#java","title":"Java","text":""},{"location":"devs/e2e-tests/","title":"Automated E2E Tests","text":""},{"location":"devs/e2e-tests/#automated-end-to-end-tests","title":"Automated End-to-End Tests","text":"<p>All data flows within Ozone and the actions performed on its HIS apps are rigorously validated using a comprehensive suite of automated end-to-end (E2E) tests.</p> <p>This section is designed to help Ozone developers familiarize themselves with <code>ozone-e2e</code>, the repository where all end-to-end tests for Ozone are maintained. It will guide you through the architecture of a typical end-to-end test case and provide the necessary knowledge and practical steps to develop your own test cases.</p> <p>Some facts about <code>ozone-e2e</code></p> <ul> <li>We use Playwright , the automation testing framework.</li> <li>We test our data flows through the actions and effects that they have on Ozone HIS apps.</li> <li>We focus on how these actions and effects are experienced by end users.</li> </ul> <p>Software Prequisites</p> <p> Node.js (version 18 or higher) and  npm (version 10 or higher) </p>"},{"location":"devs/e2e-tests/#setting-up-ozone-e2e","title":"Setting up <code>ozone-e2e</code>","text":"<p>Clone the Ozone E2E Repository: Execute the command </p><pre><code>git clone https://github.com/ozone-his/ozone-e2e\n</code></pre> Navigate to the Project Directory: Change into the directory with <pre><code>cd ozone-e2e\n</code></pre> Install Dependencies: Install the required packages <pre><code>npm install\n</code></pre>"},{"location":"devs/e2e-tests/#project-structure","title":"Project structure","text":"<p>The actual E2E tests live in the <code>e2e</code> subfolder that is organised as follows: </p><pre><code>e2e\n \u251c\u2500\u2500 tests\n |   ^ Contains test cases.\n \u2514\u2500\u2500 utils\n     ^ Contains utilities needed to set up and tear down tests,\n       as well as methods required by the tests to run.\n</code></pre> <p>The data flows resulting from the integration between specific app pairs (e.g., between Odoo and OpenMRS) are typically tested through a designated test file for each pair (e.g., <code>odoo-openmrs-flows.spec.js</code>). All test files are located in the <code>e2e/tests</code> directory. We encourage you to explore and review the current set of tests to understand the testing process better and evaluate the extent of their coverage.</p>"},{"location":"devs/e2e-tests/#project-configuration","title":"Project configuration","text":"<p>Our E2E test suite is designed to interact with three distinct Ozone environments, allowing seamless switching as needed:</p> Dev Hosts the latest, bleeding-edge versions of Ozone, updated continuously as the development team commits new code to the Ozone repositories. QA Used for staging Ozone prior to releases, facilitating final rounds of testing to ensure quality before launch. Demo Features the latest stable release of Ozone, readily accessible online for demonstration purposes and advertised through the Ozone website. <p>Two important configuration variables govern the high-level behavior of our E2E test suite:</p> <ol> <li> <p><code>TEST_ENVIRONMENT</code>: This variable specifies which one of the three environments \u2014 <code>dev</code>, <code>qa</code>, or <code>demo</code> \u2014 should be targeted for testing.E.g.: </p><pre><code>TEST_ENVIRONMENT=dev\n</code></pre> </li> <li> <p><code>TEST_PRO</code>: This toggle, set to <code>true</code> for testing Ozone Pro or <code>false</code> for Ozone FOSS, determines the flavour of Ozone HIS under test.E.g.: </p><pre><code>TEST_PRO=false\n</code></pre> </li> </ol> <p>All configuration variables are set to the desired values by editing and saving the <code>.env</code> file  prior to running the tests.</p> <p>Additionally, the <code>.env</code> file contains a range of configuration variables that specify the URLs for accessing the various HIS apps in each test environment, as well as the credentials needed to execute the test cases.</p>"},{"location":"devs/e2e-tests/#running-tests-against-a-local-instance","title":"Running tests against a local instance","text":"<p>When developing on Ozone, you will likely run a local instance of the HIS and want to execute the E2E tests against it. To do this, update the URL coordinates for the dev environment profile in the <code>.env</code> file.</p> <p>Typically, you may set the URLs in your local version of the <code>.env</code> file like this:</p> <p></p><pre><code># OpenMRS\nO3_URL_DEV=http://localhost\nO3_URL_QA=\nO3_URL_DEMO=\n\n# ...\n\n# Odoo\nODOO_URL_DEV=http://localhost:8069\nODOO_URL_QA=\nODOO_URL_DEMO=\n\n# SENAITE\nSENAITE_URL_DEV=http://localhost:8081/senaite\nSENAITE_URL_QA=\nSENAITE_URL_DEMO=\n# ...\n</code></pre> Continue this pattern for all apps running locally by identifying their local URL in your development environment, and edit the <code>.env</code> file accordingly."},{"location":"devs/e2e-tests/#running-tests","title":"Running Tests","text":""},{"location":"devs/e2e-tests/#default-test-execution","title":"Default test execution","text":"<p>To run all tests in the test suite, use the default command:</p> <pre><code>npx playwright test\n</code></pre>"},{"location":"devs/e2e-tests/#running-specific-tests","title":"Running specific tests","text":"<p>To focus on testing data flows between specific pairs of HIS apps, you can run tests contained in a specific file. For example, to test the integration data flows between Odoo and OpenMRS:</p> <pre><code>npx playwright test odoo-openmrs-flows\n</code></pre>"},{"location":"devs/e2e-tests/#selecting-your-browser","title":"Selecting your browser","text":"<p>Playwright supports various configurations for running tests across different browsers. Specify the browser using the <code>--project</code> flag. For instance, to run tests in Chromium:</p> <pre><code>npx playwright test --project=chromium\n</code></pre>"},{"location":"devs/e2e-tests/#interpreting-test-results","title":"Interpreting test results","text":"<ul> <li> <p>Passed: When all tests within the suite pass without encountering any errors, the overall result is marked as \"Passed\". This means that the application behaved as expected under the test conditions.</p> </li> <li> <p>Failed: If any test within the suite encounters an error or assertion failure during execution, the overall result is marked as \"Failed\". Determine whether the failure is specific to the test case, a particular app or feature, or the entire application. Once you've identified the root cause of the failure, implement a fix to address the issue. This may involve modifying test assertions, updating application code, or addressing environmental dependencies.</p> </li> <li> <p>Skipped: Sometimes, tests are intentionally skipped based on certain conditions or configurations. These skipped tests are not executed during the test run and are marked as \"Skipped\" in the test result.</p> </li> </ul>"},{"location":"devs/e2e-tests/#developing-test-cases","title":"Developing Test Cases","text":""},{"location":"devs/e2e-tests/#naming-test-files","title":"Naming test files","text":"<p>Our test cases cover the data flows between Ozone HIS apps and we have taken the convention to group test cases by pairs of apps. For example all data flows between OpenMRS and SENAITE are grouped together in a file named <code>openmrs-senaite-flows.spec.js</code> that lives in the <code>e2e/tests</code>. This file contains all test cases for data flows going from OpenMRS to SENAITE as well as those going from SENAITE to OpenMRS.</p> <p>The naming is alphabetical per convention. The data flows going both ways between hypothetical HIS apps Foo and Bar would live in a file named <code>bar-foo-flows.spec.js</code> and so on and so forth for all pairs of HIS apps.</p>"},{"location":"devs/e2e-tests/#testing-actions-and-effects","title":"Testing actions and effects","text":"<p>While Ozone relies on its apps default behaviour and features, we do encompass in our E2E test suite the actions performed when using the user experience of the apps and the effects observed throught the user experience of those apps. This ensures that test are truly end-to-end with a focus on the end-user experience.</p> <p>To write a test case:</p> <ul> <li>Identify the user interactions and functionalities to test between a pair of HIS apps.</li> <li>Use Playwright\u2019s API to script the actions within each test scenario, such as navigating pages, clicking buttons, filling forms, and verifying UI elements.</li> </ul>"},{"location":"devs/e2e-tests/#utilizing-playwright","title":"Utilizing Playwright","text":"<p>Leverage Playwright\u2019s comprehensive API to engage with the browser:</p> <ul> <li>Navigate to pages.</li> <li>Interact with page elements.</li> <li>Execute actions.</li> <li>Assert expected behaviors using methods like <code>expect</code>, <code>toEqual</code>, <code>toContain</code>, etc.</li> </ul> <p>For detailed usage, refer to Playwright's documentation .</p> <p>Once you've written your test, use the appropriate test runner to check that the test works as expected. For instance for the OpenMRS-SENAITE flows written in <code>openmrs-senaite-flows.spec.js</code>, run: </p><pre><code>npx playwright test openmrs-senaite-flows\n</code></pre>"},{"location":"devs/e2e-tests/#analyzing-a-sample-test-case","title":"Analyzing a sample test case","text":"<p>Again, following our example of the data flows between OpenMRS and SENAITE, let us verify that ordering a lab test for an OpenMRS patient does create the corresponding SENAITE client with an analysis request. Let us look at the sample test case code below:</p> <pre><code>import { test, expect } from '@playwright/test';\nimport { OpenMRS, patientName } from '../utils/functions/openmrs';\nimport { SENAITE } from '../utils/functions/senaite';\n\nlet openmrs: OpenMRS;\nlet senaite: SENAITE;\n\ntest.beforeEach(async ({ page }) =&gt; {\n  openmrs = new OpenMRS(page);\n  senaite = new SENAITE(page);\n\n  await openmrs.login();\n  await openmrs.createPatient();\n  await openmrs.startPatientVisit();\n});\n\ntest('Ordering a lab test for an OpenMRS patient creates the corresponding SENAITE client with an analysis request.', async ({ page }) =&gt; {\n\n  // replay\n  await openmrs.navigateToLabOrderForm();\n  await page.click('button:has-text(\"Add\")');\n  await page.selectOption('#tab select', '857AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\n  await openmrs.saveLabOrder();\n\n  // verify\n  await senaite.open();\n  await senaite.searchClient();\n  const clientName = `${patientName.firstName} ${patientName.givenName}`;\n  const client = await page.$('table tbody tr:nth-child(1) td.contentcell.title div span a:has-text(\"' + clientName + '\")');\n  await expect(client).toBeVisible();\n\n});\n\ntest.afterEach(async ({ page }) =&gt; {\n  await openmrs.deletePatient();\n  await page.close();\n});\n</code></pre> <p>We observe that the test structure is broken down between a setup, the actual test case and a cleanup:</p> <p>Test Setup: Before the actual test, we perform some preliminary actions: logging into Ozone (with SSO), creating a new patient, and starting a visit for the newly created patient.</p> <p>Test Case: The core of each test case follows the Given-When-Then pattern (organised here as Setup-Replay-Verification). We highly recommend this structured approach as it clearly delineates the setup of the test (\"Setup\"), the end-user actions performed (\"Replay\"), and the assertion of outcomes as experienced by the end-user (\"Verification\"). In our example:</p> <ul> <li>Setup: Omitted here. All aspects of the setup have been performed in the <code>beforeEach()</code> method.</li> <li>Replay: Navigation to the lab order form, add a lab test, and save the form.</li> <li>Verification: Navigation to the SENAITE HIS app and search for the client by name. Verify that the client's name is visible in the clients list.</li> </ul> <p>Cleanup: The post-test cleanup consists of deleting the test patient and closing the browser page.</p>"},{"location":"devs/eip-client/","title":"EIP Client","text":""},{"location":"devs/eip-client/#eip-client","title":"EIP Client","text":""},{"location":"devs/eip-client/#overview","title":"Overview","text":"<p>The Ozone EIP Client is a plain Spring Boot application serving as the integration middleware between apps of the Health Information System (HIS). Preconfigured within Ozone, this Spring Boot application exchanges FHIR messages via Apache Camel routes.</p> <p>This setup within Ozone leverages established enterprise integration patterns (EIP), proven open-source software (Apache Camel), and adherence to health data standards (FHIR). It ensures efficient data processing, routing, and transformation across app of the HIS, enabling seamless interoperability.</p>"},{"location":"devs/eip-client/#technology-stack","title":"Technology Stack","text":"<p>Ozone EIP Client ergonomically combines the following technologies:</p> <ul> <li> Spring Boot  (Java 17) - The core framework for the application. It provides a flexible and scalable platform for building Java applications.</li> <li>Apache Camel  - A powerful open source integration framework used to create routing between disparate systems. It provides a collection of libraries and components that facilitate the integration of systems. Some of the common used components include HTTP, JMS, and JDBC.</li> <li> Hibernate  - An object-relational mapping (ORM) library for the Java language that provides a framework for mapping an object-oriented domain model to a relational database.</li> <li>Testcontainers  - A Java library that provides lightweight, common databases that is, Postgres, MySQL, etc. or anything else that can run in a Docker container.</li> <li> JUnit 5  - A unit testing framework for Java programming language. It's a part of the JUnit platform that provides a rich set of features to write and run tests.</li> </ul>"},{"location":"devs/eip-client/#project-structure","title":"Project Structure","text":"<p>The project is structured as follows:</p> <ul> <li><code>app</code> - Contains the code and configurations responsible for running the camel routes. </li> <li><code>commons</code> - Contains common code and dependencies shared across the projects. This includes common utilities, models, and configurations.</li> <li><code>commons-test</code> - Contains common test code and test dependencies shared across the projects. This includes common test utilities and configurations.</li> </ul>"},{"location":"devs/eip-client/#getting-started","title":"Getting Started","text":"<p>To get started with EIP Client, you need to install the application and run it locally. Below are the steps to install and run the application:</p> <ol> <li> <p>Clone the repository using the following command:</p> HTTPSGitHub CLI <pre><code>git clone https://github.com/ozone-his/eip-client.git\n</code></pre> <pre><code>gh repo clone ozone-his/eip-client\n</code></pre> </li> <li> <p>Navigate to the project directory:</p> <pre><code>cd eip-client\n</code></pre> </li> <li> <p>Build the project using Maven:</p> <pre><code>mvn clean install\n</code></pre> </li> </ol>"},{"location":"devs/eip-client/#running-the-application","title":"Running the Application","text":"<p>The Ozone EIP Client is ready to run right out of the box, but it's designed to be customized with your own Camel routes and configurations. Think of it as a blank canvas for your integration routes. It automatically searches for Camel routes in the <code>routes</code> directory and for configuration files in the <code>config</code> directory. Depending on your choice of setup, you can link these directories through Docker volumes or include them in the application's classpath.</p> <p>Running the EIP Client is straightforward and can be done in several ways, including using the Spring Boot Maven plugin, Docker, or Docker Compose. The following sections will guide you through each method to get your application up and running.</p>"},{"location":"devs/eip-client/#spring-boot-maven-plugin","title":"Spring Boot Maven Plugin","text":"<p>The Spring Boot Maven plugin is a powerful tool that simplifies the execution of Spring Boot applications directly from the command line. It eliminates the need for manual packaging and deployment steps, making development and testing processes more efficient.</p>"},{"location":"devs/eip-client/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure that Maven is installed and configured on your system. If you haven't installed Maven yet, follow the instructions on the official Maven installation guide.</p>"},{"location":"devs/eip-client/#running-the-app","title":"Running the app","text":"<p>To run the Ozone EIP Client application using the Spring Boot Maven plugin, follow these steps:</p> <ol> <li> <p>Open a terminal or command prompt.</p> </li> <li> <p>Navigate to the root directory of the Ozone EIP Client project where the <code>pom.xml</code> file is located.</p> <pre><code>cd path/to/eip-client/app\n</code></pre> </li> <li> <p>Execute the following command to run the application:</p> <pre><code>mvn spring-boot:run\n</code></pre> </li> </ol> <p>Accessing the Application</p> <p>This command will start the application on the default port (usually 8080, but this can be configured in the <code>application.properties</code> file). You can access the application health status by visiting <code>http://localhost:8080/actuator/health</code> in your web browser.</p> <p>Using the Spring Boot Maven plugin is a quick and easy way to run the Ozone EIP Client application locally. It's ideal for development and testing purposes.</p>"},{"location":"devs/eip-client/#running-the-application-with-docker-and-docker-compose","title":"Running the Application with Docker and Docker Compose","text":""},{"location":"devs/eip-client/#pre-requisites","title":"Pre-requisites","text":"<p>Before you begin, ensure you have Docker and Docker Compose installed on your system. If not, follow these steps:</p> <ol> <li> <p>Install Docker:</p> <ul> <li>Visit the official Docker website and choose the installation guide for your operating system.</li> <li>Follow the instructions to download and install Docker.</li> </ul> </li> <li> <p>Install Docker Compose:</p> <ul> <li>Docker Compose installation instructions can be found on the official Docker website.</li> <li>Follow the guide that corresponds to your operating system.</li> </ul> </li> </ol>"},{"location":"devs/eip-client/#understanding-docker-volumes","title":"Understanding Docker Volumes","text":"<p>Docker volumes are used to persist data generated by and used by Docker containers. In the context of the Ozone EIP Client, volumes will be used to:</p> <ul> <li>Mount the routes directory, allowing the app to access external camel routes.</li> <li>Mount the config directory, enabling the app to access its external configuration files.</li> <li>Mount the eip-home directory, which may contain additional resources needed by the application.</li> </ul>"},{"location":"devs/eip-client/#docker","title":"Docker","text":"<p>You have two options for running the Ozone EIP Client with Docker: building the image locally or pulling an existing image from Docker Hub.</p> <ol> <li> <p>Building the Image Locally:</p> <ul> <li>Navigate to the project directory where the Dockerfile is located.</li> <li>Build the Docker image using the following command:   <pre><code>docker build -t eip-client .\n</code></pre></li> <li>Once the build is complete, you can run the container:   <pre><code>docker run -p 8080:8080 -v /path/to/routes:/eip-client/routes/ -v /path/to/config:/eip-client/config/ -v /path/to/eip-home:/eip-client/eip-home/ eip-client\n</code></pre></li> </ul> </li> <li> <p>Pulling an Existing Image from Docker Hub:</p> <ul> <li>If you prefer not to build the image yourself, you can pull an existing image from Docker Hub:   <pre><code>docker pull mekomsolutions/eip-client:latest\n</code></pre></li> <li>Run the container with the same command as above, after pulling the image.</li> </ul> </li> </ol>"},{"location":"devs/eip-client/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose simplifies the process of running Docker applications by using a <code>docker-compose.yml</code> file. Here's how to use it for the Ozone EIP Client:</p> <ol> <li> <p>Create a <code>docker-compose.yml</code> file with the following content:    </p><pre><code>services:\n  eip-client:\n    container_name: eip-client\n    image: mekomsolutions/eip-client:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./routes:/eip-client/routes/\n      - ./config:/eip-client/config/\n      - ./eip-home:/eip-client/eip-home/\n</code></pre>    This configuration sets up the necessary ports and volumes for the application.  <p>Don't forget to replace the paths</p> <p>Make sure to replace the paths in the <code>volumes</code> section with the actual paths to your routes, config, and eip-home directories.</p> </li> <li> <p>Run the application using Docker Compose:    </p><pre><code>docker-compose up -d\n</code></pre>    This command will start the Ozone EIP Client in a Docker container as defined in the <code>docker-compose.yml</code> file. The <code>-d</code> flag runs the container in detached mode, allowing you to continue using the terminal. </li> </ol> <p>By following these steps, you can run Ozone EIP Client application using Docker and Docker Compose.</p> <p>Accessing the Application</p> <p>Once the app is up and running, you can access application health status by visiting <code>http://localhost:8080/actuator/health</code> in your web browser. However, if you've configured a different port in the <code>application.properties</code> file, you should use that port number instead.</p>"},{"location":"devs/eip-client/#supporting-java-dsl-and-xml-routes","title":"Supporting Java DSL and XML Routes","text":"<p>EIP Client is designed to support both Apache Camel routes written in Java DSL and XML. This flexibility allows developers to choose the most suitable format for their integration routes.</p>"},{"location":"devs/eip-client/#java-dsl-routes","title":"Java DSL Routes","text":"<p>For routes defined using Java DSL, you should package your routes into a JAR file. Once packaged, this JAR file needs to be placed in the <code>routes</code> directory of the EIP Client. The application will automatically detect and load these routes upon startup.</p> <p>For Docker setup, directly mount the JAR file to the <code>/eip-client/routes</code> directory inside the container. This ensures that the application can access and load the Java DSL routes correctly.</p>"},{"location":"devs/eip-client/#xml-routes","title":"XML Routes","text":"<p>XML-defined routes can be directly placed in the <code>routes</code> directory. There's no need for compilation or packaging into a JAR file. Simply dropping the XML file into the directory is sufficient for the EIP Client to recognize and load these routes.</p> <p>For Docker setups, mount the directory containing the XML files to the <code>/eip-client/routes</code> directory inside the container. This ensures that the application can access and load the XML routes correctly.</p>"},{"location":"devs/eip-client/#configurations","title":"Configurations","text":"<p>Configurations for both Java DSL and XML routes are managed through the <code>application.properties</code> file within the config directory. The <code>application.properties</code> file contains route-specific properties configured to meet the integration requirements.</p> <p>For Docker and Docker Compose setup, the <code>config</code> directory should be mounted to the <code>/eip-client/config</code> directory inside the container. This ensures that the application reads the configuration properties correctly.</p>"},{"location":"getting-started/online-demo/","title":"Access Online Demo","text":"<p>Visit our website  click Demo to explore the official Ozone Pro online demo.</p> <p></p>"},{"location":"getting-started/run-in-gitpod/","title":"Run In Gitpod","text":"<p>Just one click:</p> <p></p> <p> It may take some time to download and setup Ozone for the first time.</p> <p>Gitpod will automatically launch a new browser tab for OpenMRS 3.</p> <p>You can navigate to other Ozone apps of the HIS via the <code>PORTS</code> tab of the Terminal panel in the Gitpod editor:</p> <p></p> <p>In Gitpod each app of the HIS will require you to log in separately with their own credentials:</p> HIS App Username Password OpenMRS 3 admin Admin123 Odoo admin admin Superset admin password SENAITE admin password Orthanc orthanc orthanc ERPNext administrator password <p>\ud83d\udca1 Single Sign-On isn\u2019t supported in Gitpod. To try it out, check the offical demo or run Ozone locally</p>"},{"location":"getting-started/run-locally/","title":"Run Locally","text":""},{"location":"getting-started/run-locally/#download-and-start","title":"Download and start","text":"<p>Running the Ozone demo locally takes just three terminal commands:</p> <pre><code>curl -s https://raw.githubusercontent.com/ozone-his/ozone/main/scripts/install-stable.sh | bash /dev/stdin\n</code></pre> <pre><code>cd ozone/run/docker/scripts/\n</code></pre> <pre><code>./start-demo-with-sso.sh\n</code></pre> <p> It may take some time to download and setup Ozone for the first time.</p>"},{"location":"getting-started/run-locally/#browse","title":"Browse","text":"<p>Once started, the script will output the URLs to access the HIS apps and services:</p> <p>For example:</p> <p></p> <p>Accessing any of those URLs should present you the Single Sign-On portal page:</p> <p></p> <p>Log in to the demo using username jdoe and password password.</p> <p>You're ready to start browsing Ozone \ud83d\udc4f !</p> <p>\ud83d\udee0\ufe0f If you encounter an error when trying to access OpenMRS specifically, you may need to apply the following command to force a restart of the OpenMRS service. </p><pre><code>docker restart ozone-openmrs-1\n</code></pre>"},{"location":"getting-started/run-locally/#shut-down-the-server","title":"Shut down the server","text":"<p>Once you're done browsing Ozone, you can destroy the server to keep your environment clean.</p> <pre><code>./destroy-demo.sh\n</code></pre>"},{"location":"implementers/backup-restore/","title":"<span style='color:36464e'/>Backup & Restore","text":"<p>Ozone includes backup and restore out of the box. The backup and restore engine is powered by the powerful and popular Restic project. Meaning all the storage types supported by Restic can eventually be supported by Ozone.</p> <p>We wrap Restic in a convience project to allow it to seamlessly intergrate with Ozone and if you are curious about the details you can take a look at the wrapper project</p> <p>Backups stored by Restic are encrypted.</p> <p>The backup and restore process is broken into two different services:</p> <ul> <li>Backup service, which will run perdiocally.</li> <li>Restore service, which will be run once, to restore from a backup.</li> </ul>"},{"location":"implementers/backup-restore/#backing-up","title":"Backing up","text":"<p>While the backup services are enabled by default when starting Ozone using the Start &amp; Stop instructions, you may want to configure how and where the backups are stored, as well as at which frequency they're made.</p> <p>As of now, you have 2 options to configure the Restic repository:</p> <ul> <li>Backup to a local path</li> <li>Backup to S3</li> </ul> <p>Configuration of the backup services is done through environment variables. There are multiple ways to set environment variables in Ozone. One of them could be to export the variable before running the start scripts, and this is the method used as an example in this page.</p> <p>Once you speficy where and when to backup, you can run Ozone.</p> <p>Example using the standard Start &amp; Stop instructions:</p> <pre><code>./start.sh\n</code></pre> <p>A container suffixed as <code>-backup</code> will be created and always running.</p> <p>But be sure to configure the backup service first, as detailed in the section below.</p>"},{"location":"implementers/backup-restore/#configure-the-backup-frequency","title":"Configure the backup frequency","text":"<p>To specify the frequency of the backup, you can set the <code>CRON_SCHEDULE</code> variable.</p> <p>For example, to backup daily at 3am, you can run: </p><pre><code>export CRON_SCHEDULE=\"0 3 * * *\"\n</code></pre>"},{"location":"implementers/backup-restore/#backup-to-local-path","title":"Backup to local path","text":"<p>This is the default storage. With this option, all Restic backup files will be stored on disk. The default location of the archives is set to <code>./restic_data</code>. You can override it to any path on your filesystem where it is safe to store your backups (eg, a mounted NFS folder).</p> <p>To do so, set the <code>BACKUP_PATH</code> environment variable to point to the path of choice.</p> <pre><code>export BACKUP_PATH=/mnt/nfs/backups/\n</code></pre>"},{"location":"implementers/backup-restore/#backup-to-s3","title":"Backup to S3","text":"<p>Alternatively, you can store your backups on an S3 bucket.</p> <p>Setting up an AWS S3 bucket</p> <p>For help to properly set up an S3 bucket in AWS for Restic, you can follow the Restic documentation.</p> <p>Once you have your bucket set up, you can configure a set of environemnt variables which, when set, will disable the default and enable storing the backups on S3.</p> <pre><code>export AWS_ACCESS_KEY_ID='key' \nexport AWS_SECRET_ACCESS_KEY='secret' \nexport RESTIC_REPOSITORY='s3:s3.amazonaws.com/ozone-backup'\nexport AWS_DEFAULT_REGION='eu-west-1'\n</code></pre>"},{"location":"implementers/backup-restore/#viewing-backups","title":"Viewing backups","text":"<p>You can list the backups by using the Restic <code>snapshots</code> command. You can either run <code>restic snapshots</code> directly from an existing Restic container, or you can run an ephemeral container just for it:</p> <p>Example for a local path Restic repository (assuming you have set the <code>BACKUP_PATH</code> value) <code>docker run --rm --volume $BACKUP_PATH:/restic_data -env-file .env restic/restic:0.18.0 snapshots -r /restic_data</code></p> <p>Example if using S3 storage. Make sure to export the S3 specific variables. The command will then be: <code>docker run --rm -env-file .env restic/restic:0.18.0 snapshots -r /restic_data</code></p> <p>The output will look like this:</p> <pre><code>ID        Time                 Host          Tags        Paths    Size\n----------------------------------------------------------------------------\n848a1772  2025-08-08 17:00:13  b89710290fa0              /backup  72.046 MiB\nd46a0a4c  2025-08-08 17:15:08  10a1aa2e1817              /backup  70.820 MiB\n----------------------------------------------------------------------------\n2 snapshots\n</code></pre> <p>Unless you speficy otherwise, the most recent snapshot will be used for restore. To override this, set the <code>RESTIC_RESTORE_SNAPSHOT</code> variable to the snapshot ID of choice.</p>"},{"location":"implementers/backup-restore/#restoring","title":"Restoring","text":"<p>Depending on how you have configured the backups, you need to restore the data accordingly. As a reminder, the 2 options available are:</p> <ul> <li>Restoring from a local path</li> <li>Restoring from S3</li> </ul> <p>As opposed to the backup services, the restore services will run only once. Once done, the restore service will exit and Ozone will resume its startup.</p> <p>Restore is triggered by setting <code>RESTORE</code> to <code>true</code>: </p><pre><code>export RESTORE=\"true\"\n</code></pre> <p>Potential Data Loss!</p> <p>Please avoid hardcoding <code>RESTORE=\"true\"</code> in any environment file so that it doesn't persist. This is to avoid re-restoring upon next restart, which could lead to losing data.</p> <p>Then you need to set a particular value to the <code>COMPOSE_PROFILES</code> to inform which app you will restore data from. The available values are:</p> <ul> <li><code>openmrs-restore</code></li> <li><code>odoo-restore</code></li> <li><code>senaite-restore</code></li> </ul> <p>For example: </p><pre><code>export COMPOSE_PROFILES='openmrs-restore,odoo-restore'\n</code></pre> <p>And run Ozone to proceed with the restore.</p> <p>Eg, using the standard Start &amp; Stop instructions:</p> <pre><code>./start.sh\n</code></pre> <p>Potential Data Loss!</p> <p>Once the restore is done, run <code>unset RESTORE</code>. This is to avoid re-restoring upon next restart, which could lead to losing data.</p> <p>But before actually restoring, let's dive and see how to set the variables to tell where to retrieve the backup.</p>"},{"location":"implementers/backup-restore/#restoring-from-a-local-path","title":"Restoring from a local path","text":"<p>This option is suitable when your Restic backups have been configured to be stored at a local path. The restore options are configured using environment variables, as usual.</p> <p>For example, to restore data that has been backed up at <code>/mnt/nfs/backups</code>: </p><pre><code>export BACKUP_PATH=/mnt/nfs/backups/\n</code></pre>"},{"location":"implementers/backup-restore/#restoring-from-s3","title":"Restoring from S3","text":"<p>If your backups have been configured to be stored on S3, you must set those environment variables.</p> <pre><code>export AWS_ACCESS_KEY_ID='key' \nexport AWS_SECRET_ACCESS_KEY='secret' \nexport RESTIC_REPOSITORY='s3:s3.amazonaws.com/ozone-backup'\nexport AWS_DEFAULT_REGION='eu-west-1'\n</code></pre> <p>And run the commands as specified earlier.</p>"},{"location":"implementers/backup-restore/#disable-backups","title":"Disable backups","text":"<p>When using the default Start &amp; Stop instrucutions, the backup services are enabled by default.</p> <p>However, if you want to disable them, you simply should not include the <code>docker-compose-backup.yml</code> file to your start command. In that way it is similar to any other service in Ozone.</p> <p>See this link to know how to specify the list of files to run: Enable &amp; Disable Apps and Integrations</p>"},{"location":"implementers/backup-restore/#advanced-configuration","title":"Advanced configuration","text":"<p>Restic provides a rich set of features and backup storage backends, but Ozone supports only a small subset of the features and local path and S3 as the backup storage backends. Among the supported features, you can set the password to protect the archives or configure data retention duration.</p> <p>Supported Configuration</p> Env Variable Details Example BACKUP_PATH The external directory for storing Restic backups when storing on local disk CRON_SCHEDULE Unix Cron pattern for when the backup with happen <code>*/5 * * * *</code> AWS_DEFAULT_REGION This is used to set the bucket region when <code>RESTIC_REPOSITORY</code>  is S3 AWS_ACCESS_KEY_ID This is used to set the AWS access key id when <code>RESTIC_REPOSITORY</code>  is S3 AWS_SECRET_ACCESS_KEY This is used to set the AWS secret when <code>RESTIC_REPOSITORY</code>  is S3 RESTORE This variable is only needed when you want to test the restore using the <code>start.sh</code>  helper script. It has to be set to true <code>export RESTORE=\"true\"</code> COMPOSE_PROFILES Along side env above, you have to enable the restore Docker compose profiles for the services you wish to restore when running with the <code>start.sh</code> <code>export COMPOSE_PROFILES=openmrs-restore,odoo-restore</code> RESTIC_KEEP_WEEKLY How many weeks back we should keep at least one snapshot RESTIC_KEEP_MONTHLY How many months back we should keep at least one snapshot RESTIC_KEEP_YEARLY How many years back we should keep at least one snapshot RESTIC_PASSWORD The password used to unlock the repository <code>password</code> RESTIC_RESTORE_SNAPSHOT The snapshot to be restored <code>latest</code> LOG_LEVEL The log level for the Docker Compose Wrapper <code>info</code> RESTIC_REPOSITORY Location of repository. A repository in Restic is refers to where the backups will be stored <code>/restic-backups</code> , <code>s3:s3.amazonaws.com/ozone-backup</code>"},{"location":"implementers/branding-apps/","title":"<span style='color:36464e'>Branding & White-labelling","text":""},{"location":"implementers/branding-apps/#branding-white-labelling","title":"Branding &amp; White-labelling","text":""},{"location":"implementers/branding-apps/#white-labelling-odoo","title":"White-labelling Odoo","text":"<p>Odoo allows developers to extend and modify both its functionality and user interface using add-ons. In this guide, we will document how to use the OCA <code>web_company_color</code> add-on to apply a custom theme to your Odoo instance.</p> <p>As an example, we've used this add-on to apply the OpenMRS theme colors across the Odoo 17 UI to provide a users with a more unified experience between Ozone applications.</p>"},{"location":"implementers/branding-apps/#what-does-the-add-on-do","title":"What Does the Add-on Do?","text":"<p>The add-on applies theme colors to Odoo elements like:</p> <ul> <li>Navigation bar</li> <li>Buttons</li> <li>Links</li> <li>Menus</li> <li>Forms and status bars</li> </ul> <p>It works by:</p> <ol> <li>Defining a SCSS (CSS with variables) template containing all the UI elements.</li> <li>Replacing variables like <code>%(color_navbar_bg)s</code> with actual color values.</li> <li>Generating the final SCSS code that is applied to the Odoo frontend.</li> </ol>"},{"location":"implementers/branding-apps/#scss-template","title":"SCSS Template","text":"<p>Here's a snippet of the SCSS template used to apply custom colors:</p> <pre><code>SCSS_TEMPLATE = \"\"\"\n.o_main_navbar {\n    background: %(color_navbar_bg)s !important;\n    color: %(color_navbar_text)s !important;\n    ...\n}\n\n.btn-primary:not(.disabled) {\n    background-color: %(color_button_bg)s !important;\n    color: %(color_button_text)s !important;\n}\n...\n\"\"\"\n</code></pre> <p>These variables (<code>%(color_navbar_bg)s</code>, <code>%(color_button_bg)s</code>, etc.) are replaced with values using the <code>_scss_get_sanitized_values</code> method.</p>"},{"location":"implementers/branding-apps/#setting-the-color-values","title":"Setting the Color Values","text":"<p>The color values are provided in Python as a dictionary. This method overrides the default color settings:</p> <pre><code>def _scss_get_sanitized_values(self):\n    self.ensure_one()\n    values = dict(self.company_colors or {})\n    values.update(\n        {\n            \"color_navbar_bg\": \"#005d5d\",\n            \"color_navbar_bg_hover\": \"#007070\",\n            \"color_navbar_text\": \"#ffffff\",\n            \"color_button_bg\": \"#005d5d\",\n            \"color_button_bg_hover\": \"#007070\",\n            \"color_button_text\": \"#ffffff\",\n            \"color_link_text\": \"#005d5d\",\n            \"color_link_text_hover\": \"#007070\",\n            \"color_submenu_text\": \"#ffffff\",\n            \"color_menu_brand\": \"#ffffff\"\n        }\n    )\n    return values\n</code></pre>"},{"location":"implementers/branding-apps/#how-to-modify-the-theme-colors","title":"How to Modify the Theme Colors","text":"<p>Let's say you want to change the navbar background color to dark blue and button background color to green.</p> <ul> <li> <p>Locate the <code>res.company.py</code> file where the SCSS code is defined.</p> </li> <li> <p>Update the color values in <code>_scss_get_sanitized_values</code> method:</p> </li> </ul> <pre><code>values.update(\n    {\n        \"color_navbar_bg\": \"#001f3f\",  # Dark blue\n        \"color_navbar_bg_hover\": \"#003366\",\n        \"color_navbar_text\": \"#ffffff\",\n        \"color_button_bg\": \"#28a745\",  # Green\n        \"color_button_bg_hover\": \"#218838\",\n        \"color_button_text\": \"#ffffff\",\n        \"color_link_text\": \"#001f3f\",\n        \"color_link_text_hover\": \"#003366\",\n        \"color_submenu_text\": \"#ffffff\",\n        \"color_menu_brand\": \"#ffffff\"\n    }\n)\n</code></pre> <ul> <li> <p>Restart Odoo to regenerate the SCSS and apply the new theme.</p> </li> <li> <p>Clear cache or do a hard reload to see the updated theme.</p> </li> </ul>"},{"location":"implementers/branding-apps/#notes","title":"Notes","text":"<ul> <li>More SCSS variables and styles can be added by editing the <code>SCSS_TEMPLATE</code>.</li> <li>Manually verify your CSS/SCSS syntax because your IDE might not show the errors as the code is in Python and not HTML/CSS</li> <li>Use <code>!important</code> carefully to avoid style conflicts.</li> </ul>"},{"location":"implementers/branding-apps/#white-labelling-keycloak","title":"White-labelling Keycloak","text":"<p>Keycloak allows you to fully customize its look, feel, and behavior by modifying its themes. Themes control how pages like login, account management, and email templates appear to users.</p>"},{"location":"implementers/branding-apps/#types-of-keycloak-theme-pages","title":"Types of Keycloak Theme Pages","text":"<p>Keycloak has different pages and templates which can be customized:</p> <ul> <li>Login Pages</li> <li>Account Pages</li> <li>Admin Console Pages</li> <li>Email templates</li> </ul> <p>Recommendation</p> <p>Keycloak supports theme inheritance, which means you can extend an existing theme and override only the parts you need. Unless you plan to replace every single page, you should extend another theme instead of starting from scratch.</p>"},{"location":"implementers/branding-apps/#customization-methods","title":"Customization Methods","text":"<p>There are several ways to customize themes in Keycloak. The two most recommended methods are:</p>"},{"location":"implementers/branding-apps/#-freemarker-templates-ftl-files","title":"- Freemarker Templates (.ftl files)","text":"<p>Technology: Uses Apache FreeMarker Use Case: Good for small customizations or branding changes Used In:</p> <ul> <li>Ozone Distro - A custom login screen for Ozone, implemented using FTL templates and custom CSS.</li> <li>OpenMRS Distro HIS - Customized login screen for OpenMRS Distro HIS</li> </ul> <p>How to use:</p> <ul> <li>Follow the official Keycloak documentation on creating a theme.</li> <li>Once your theme directory (e.g., <code>myCustomTheme</code>) is ready, place it inside the <code>configs/keycloak/themes</code> folder in your Ozone distribution.</li> <li>The Maven build process will automatically detect the theme and load it into Keycloak.</li> <li>After the Ozone distribution is up and running:<ul> <li>Log in to Keycloak.</li> <li>Navigate to the Themes section.</li> <li>Select your custom theme.</li> <li>Restart the Keycloak container if required.</li> </ul> </li> <li>To make this your default theme:<ul> <li>Duplicate the realm configuration file in your distribution.</li> <li>Place the copy inside the <code>configs/keycloak/realms</code> folder.</li> </ul> </li> <li>In the copied file, update the Keycloak theme name at this location.</li> </ul>"},{"location":"implementers/branding-apps/#-keycloakify","title":"- Keycloakify","text":"<p>Technology: React-based theme builder Keycloakify Use Case: Ideal for complex UI changes and building modern UIs Used In: </p> <ul> <li>Ozone FAIMER Project - Used to fully customize login, reset password, and email verification pages.</li> </ul> <p>How to use:</p> <ul> <li>Follow the Keycloakify documentation on theme types.</li> <li>Make the desired cosmetic changes to your theme.</li> <li>Build your theme JAR.</li> <li>You now have two deployment options:<ul> <li>Mavenize the Keycloakify project and publish the JAR to a central repository so it can be pulled into your distribution automatically.</li> <li>Manually deploy by building the JAR locally and copying it into the distribution every time you make a theme change.</li> </ul> </li> <li>In either case, ensure the following:<ul> <li>The JAR should end up in <code>distro/binaries/keycloak/themes</code> in your final distribution package.</li> <li>If manually copying, place the JAR directly inside <code>binaries/keycloak/themes</code> in your distribution.</li> </ul> </li> <li>To make this your default theme:<ul> <li>Duplicate the realm configuration file in your distribution.</li> <li>Place the copy inside <code>configs/keycloak/realms</code>.</li> </ul> </li> </ul>"},{"location":"implementers/branding-apps/#additional-notes","title":"Additional Notes","text":"<p>Important Considerations</p> <ul> <li>Always test your theme against compatible Keycloak version</li> <li>Keycloakify themes are compiled using a Node.js build toolchain</li> <li>FTL themes are simpler to implement but offer less flexibility compared to React-based solutions</li> </ul>"},{"location":"implementers/configure-apps/","title":"<span style='color:36464e'>Configure Apps","text":""},{"location":"implementers/configure-apps/#configuring-apps","title":"Configuring Apps","text":"<p>Now that you have successfully created your Ozone distribution, the next step is to customize and configure it to meet your specific needs. This process involves three main aspects: configuring the apps themselves, configuring integrations between the apps and enabling or disabling apps.</p> <p>This page focuses specifically on configuring the apps available in the Ozone ecosystem.</p> <p>The Ozone ecosystem strongly advocates for configuring your server through configuration files rather than alternative methods such as database archives, SQL queries, or manual UI configuration. This approach ensures that you can consistently replicate your production (or soon-to-be production) instance at any time. By adopting this practice, you gain the flexibility to create multiple environments for various purposes, including development, testing, demonstration, and training, without relying on or anonymizing a production database. Furthermore, this method empowers implementers to maintain full control over the configuration, enhancing overall system management and reproducibility.</p> <p>Within the skeleton project generated by the Ozone Maven Archetype, you'll find a <code>configs/</code> directory. This directory is organized into subfolders, each corresponding to a component of the Ozone HIS distribution.</p> <p>By default, the <code>configs/</code> directory contains only the <code>openmrs/</code> sub-folder as an example. However, as you progressively add more configurations, it will gradually expand to include one folder for each enabled app in your Ozone distribution. For example:</p> <pre><code> configs/\n    \u251c\u2500\u2500 erpnext\n    \u251c\u2500\u2500 openmrs\n    \u251c\u2500\u2500 senaite\n    \u2514\u2500\u2500 superset\n    ...\n</code></pre> <p>Each app-specific subfolder can be used to provide the configuration files for that app, thereby overriding the default configuration of the app.</p> <p>Without providing any particular files your distro will run off of the default apps configurations. Ozone itself is mostly not overriding any configuration, but uses the apps \"as is\".</p> <p>Each app's default configuration is the responsibility of its own open-source community.</p> <p>Ozone HIS provides these configurations \"as is\", they are not modified or maintained by the Ozone development team.</p>"},{"location":"implementers/configure-apps/#overriding-the-openmrs-3-config","title":"Overriding the OpenMRS 3 Config","text":"<p>This section assumes knowledge of:</p> <ul> <li>OpenMRS module Initializer</li> <li>OpenMRS 3 frontend configuration &amp; architecture</li> </ul> <p>To assist implementers, the OpenMRS 3 config in Ozone is already structured with multiple subfolders that outline the essential configurations: </p><pre><code>   \u251c\u2500\u2500 openmrs\n         \u251c\u2500\u2500 frontend_assembly\n         \u251c\u2500\u2500 frontend_config\n         \u2514\u2500\u2500 initializer_config\n</code></pre>"},{"location":"implementers/configure-apps/#the-frontend_assembly-folder","title":"The <code>frontend_assembly/</code> folder","text":"<p>The <code>frontend_assembly/</code> folder is meant to contain only one file: <code>spa-assemble-config.json</code>. In this file, one can specify frontend modules to exclude from the inherited OpenMRS Reference Application, new ones to add or versions override. This configuration is optional and no file can be provided if you do not want or need to override the frontend modules.</p> <p>Eg: </p><pre><code>{\n    \"frontendModules\": {\n        \"@kenyaemr/esm-care-panel-app\": \"5.1.1-pre.157\"\n    },\n    \"__comment\": \"\",\n    \"frontendModuleExcludes\": [\n        \"@openmrs/esm-service-queues-app\"\n    ]\n}\n</code></pre> <p>Technical note: The <code>spa-assemble-config.json</code> is merged with the default assembly file from OpenMRS Reference Application at build time by a custom build script provided in Ozone, build-openmrs-frontend.groovy</p>"},{"location":"implementers/configure-apps/#the-frontend_config-folder","title":"The <code>frontend_config/</code> folder","text":"<p>The <code>frontend_config/</code> folder is where to specify OpenMRS 3 frontend configurations. This could be one or multiple JSON files. By default, a child Ozone distribution will come with 2 config files, directly inherited from the Ozone parent distribution. </p><pre><code>frontend_config/\n\u251c\u2500\u2500 ozone-frontend-config-sso.json\n\u2514\u2500\u2500 ozone-frontend-config.json\n</code></pre> <p>Those can be overridden by simply creating a file of the same name in your own distribution. Or you can create a new file to bring distro-specific configurations on top of the existing ones. Doing so will require to set a particular environment variable so to inform OpenMRS frontend of this newly introduced configuration file. For example, <code>config.json</code>.</p> <p>The variable to override is named <code>SPA_CONFIG_URLS</code>. It consists of a comma separated list of file paths. Create a new <code>.env</code> file in the <code>scripts/</code> folder of your distribution with any name. For example, <code>override.env</code>. Then set the value of the variable there. For example:</p> <p></p><pre><code>SPA_CONFIG_URLS=/openmrs/spa/configs/ozone-frontend-config.json,/openmrs/spa/configs/config.json\n</code></pre> The above example tells OpenMRS to load the default Ozone file <code>ozone-frontend-config.json</code>, as well your custom <code>config.json</code> file. They will be loaded in the order provided."},{"location":"implementers/configure-apps/#the-initializer_config-folder","title":"The <code>initializer_config/</code> folder","text":"<p>The third folder in the OpenMRS configuration is <code>initializer_config/</code>. This folder is designated to contain all configuration files for the OpenMRS backend. The OpenMRS Initializer module reads from this directory and applies the specified configurations to the system. These configurations encompass various elements such as Visit Types, Concepts, Roles, Privileges, and Clinical forms, among others.</p> <p>For comprehensive information on the Initializer's functionality and usage, refer to the detailed documentation available in the OpenMRS Initializer GitHub repository.</p> <p>\ud83d\udc49 GitHub: OpenMRS Initializer</p>"},{"location":"implementers/configure-apps/#overriding-the-senaite-config","title":"Overriding the SENAITE Config","text":""},{"location":"implementers/configure-apps/#the-initializer_config-folder_1","title":"The <code>initializer_config/</code> folder","text":"<p>In its standalone form, SENAITE does not include pre-configured settings or a built-in mechanism for loading configurations. Implementers typically need to manually configure the system through the user interface and retain this database for the initial production deployment, or alternatively, develop a custom add-on containing the desired configurations.</p> <p>However, SENAITE's underlying framework, Plone, offers functionality for loading configuration archives. To leverage this capability within the Ozone ecosystem, we've developed a Plone Initializer plugin. This plugin enables SENAITE to utilize configuration loading features when integrated with Ozone.</p> <p>The configuration process still requires initial setup via the user interface, followed by exporting these settings. Once exported, the configurations will be automatically applied during subsequent deployments, streamlining the setup process for multiple instances.</p> <p> TODO: Guide for exporting the configuration archive.</p>"},{"location":"implementers/configure-apps/#overriding-the-odoo-config","title":"Overriding the Odoo Config","text":"<p>Like SENAITE, Odoo lacks a implementer-friendly mechanism for loading configurations by default. Implementers typically resort to creating custom add-ons (requiring coding skills) or manual UI configuration, which poses challenges for environment reproducibility.</p> <p>However, Odoo's underlying framework does support file imports. To capitalize on this feature, Ozone utilizes the Odoo Initializer add-on. This tool enables the loading of CSV or XML files from a designated configuration folder to Odoo.</p> <p>For in-depth information on the Odoo Initializer's functionality and usage, consult the documentation available in its GitHub repository.</p> <p>\ud83d\udc49 GitHub: Odoo Initializer</p>"},{"location":"implementers/configure-apps/#overriding-the-superset-config","title":"Overriding the Superset Config","text":""},{"location":"implementers/configure-apps/#overriding-the-erpnext-config","title":"Overriding the ERPNext Config","text":""},{"location":"implementers/create-distro/","title":"<span style='color:36464e'>Create Your Own Distribution","text":""},{"location":"implementers/create-distro/#create-your-own-distribution-of-ozone-his","title":"Create Your Own Distribution of Ozone HIS","text":""},{"location":"implementers/create-distro/#why-your-own-distribution","title":"Why your own distribution?","text":"<p>Beyond experimenting with the Quick Start guide, implementers of Ozone HIS will soon discover the need to provide their own configurations and possibly bespoke customizations to Ozone HIS. We recommend to do so through creating and managing your own distribution of Ozone HIS.</p> <p>Adopting a distribution architecture for Ozone offers several compelling advantages:</p>"},{"location":"implementers/create-distro/#enhanced-packaging-and-configuration-management","title":"Enhanced Packaging and Configuration Management","text":"<p>By creating your own distribution (e.g., using Maven Archetype), you inherit Ozone's robust packaging concepts. This approach enables proper versioning of configurations, facilitating controlled and agile deployments.</p>"},{"location":"implementers/create-distro/#flexible-inheritance-structure","title":"Flexible Inheritance Structure","text":"<p>A distribution architecture allows for a multi-layered structure, enabling hierarchical configuration management. For instance, you can:</p> <ul> <li>Establish country-level configurations</li> <li>Inherit and customize these at the program level</li> <li>Further refine settings for specific facilities</li> </ul>"},{"location":"implementers/create-distro/#seamless-upgradability","title":"Seamless Upgradability","text":"<p>By utilizing the distribution mechanism, you incorporate the main Ozone as a dependency, building upon it rather than forking the codebase. This approach mitigates the risk of isolation and ensures easier upgrades.</p>"},{"location":"implementers/create-distro/#simplified-adoption-and-focus","title":"Simplified Adoption and Focus","text":"<p>Ozone handles complex build logic and base configurations, allowing you to concentrate on adapting the system to your specific requirements. This approach significantly reduces the learning curve and implementation time.</p>"},{"location":"implementers/create-distro/#enhanced-collaboration-and-community-impact","title":"Enhanced Collaboration and Community Impact","text":"<p>By leveraging the upstream Ozone development, all users benefit from community-driven improvements. This collaborative model makes it easier for individuals and organizations to contribute meaningfully to the Ozone ecosystem.</p>"},{"location":"implementers/create-distro/#create-your-own-child-distribution","title":"Create your own \"child\" distribution","text":"<p>Ozone provides a series Apache Maven-based tools to facilitate the assembly of your own tailored HIS distribution. This starts with the Ozone Maven Archetype.</p>"},{"location":"implementers/create-distro/#the-ozone-maven-archetype","title":"The Ozone Maven Archetype","text":"<p>The Ozone Maven Archetype generates a foundational skeleton project, providing a customizable base for any specific implementation requirements.</p> <p>Software Prequisites</p> <ul> <li> Maven </li> <li> Docker Compose </li> </ul>"},{"location":"implementers/create-distro/#1-configure-maven","title":"1) Configure Maven","text":"<p>Edit your Maven <code>settings.xml</code> file (usually located at <code>~/.m2/settings.xml</code>) and add the following block to it: </p><pre><code>&lt;profiles&gt;\n  &lt;profile&gt;\n    &lt;id&gt;ozone&lt;/id&gt;\n    &lt;repositories&gt;\n      &lt;repository&gt;\n        &lt;id&gt;archetype&lt;/id&gt;\n        &lt;url&gt;https://nexus.mekomsolutions.net/repository/maven-public&lt;/url&gt;\n        &lt;releases&gt;\n          &lt;enabled&gt;true&lt;/enabled&gt;\n          &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;\n        &lt;/releases&gt;\n        &lt;snapshots&gt;\n          &lt;enabled&gt;true&lt;/enabled&gt;\n          &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;\n        &lt;/snapshots&gt;\n      &lt;/repository&gt;\n    &lt;/repositories&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n\n&lt;activeProfiles&gt;\n  &lt;activeProfile&gt;ozone&lt;/activeProfile&gt;\n&lt;/activeProfiles&gt;\n</code></pre>"},{"location":"implementers/create-distro/#2-generate-the-archetype","title":"2) Generate the archetype","text":"<p>Use Maven's archetype tools to generate a new Ozone implementation project structure:</p> <pre><code>mvn org.apache.maven.plugins:maven-archetype-plugin:3.2.1:generate \\\n      -DarchetypeArtifactId=maven-archetype \\\n      -DarchetypeGroupId=com.ozonehis \n</code></pre> <p>This will prompt you for several key variables for your Maven project:</p> Prompt variable Sample value Explanation <code>distributionName</code> <code>Ozone Gruzinia</code> A name for your distribution. For example, a reference Ozone implementation for the imaginary country of Gruzinia could be named \"Ozone Gruzinia\". <code>groupId</code> <code>gz.moh</code> The Maven group ID  that will be used for the implementation artifact. For \"Ozone Gruzinia\" this might be something like <code>gz.moh</code>. <code>artifactId</code> <code>ozone-gruzinia</code> The Maven artifact ID  that will be used for the implementation artifact. For \"Ozone Gruzinia\" this might be <code>ozone-gruzinia</code>. <code>package</code> <code>gz.moh</code> A required property, but not used. To make it easy just accept the default value, which should default to be the same as the <code>groupId</code>. <code>version</code> <code>1.0.0-SNAPSHOT</code> The version number for the distribution, it starts by default at <code>1.0.0-SNAPSHOT</code>. <p>This will create a bare-bones Ozone implementation project that should look like this: </p><pre><code>ozone-gruzinia/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 assembly.xml\n\u251c\u2500\u2500 configs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 openmrs\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 frontend_config\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 initializer_config\n\u2514\u2500\u2500 pom.xml\n</code></pre> <p>Congratulations , you have created your child distribution of Ozone. Note that it does not configure or override anything. It is, at the moment, only plain Ozone. Check out our next section to configure your distribution:</p> <ul> <li>Configure Apps - White labeling, metadata configuration...</li> <li>Configure Integrations - Configure integration points, enable/disable integration routes...</li> <li>Enable &amp; Disable Apps Integrations - Define which app or integration should be run.</li> </ul> <p>Or if you want to try your distribution as such, jump right to Start &amp; Stop page.</p>"},{"location":"implementers/enable-central-auth/","title":"Enable Central Authorization","text":""},{"location":"implementers/enable-sso/","title":"Configuring Single Sign-On","text":""},{"location":"implementers/enabling-apps/","title":"<span style='color:36464e'>Enable & Disable Apps and Integrations","text":""},{"location":"implementers/enabling-apps/#enabling-disabling-his-components","title":"Enabling &amp; Disabling HIS Components","text":"<p>Ozone uses Docker by default and its Docker Compose setup is stated as a dependency of the distribution by relying on the Ozone Docker Compose project:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.ozonehis&lt;/groupId&gt;\n  &lt;artifactId&gt;ozone-docker-compose&lt;/artifactId&gt;\n  &lt;type&gt;zip&lt;/type&gt;\n&lt;/dependency&gt;\n</code></pre> <p>What if Docker can't be used?</p> <p>Ozone's default deployment mechanism could be changed by depending on another deployment mechanism project than Ozone Docker Compose. Such alternatives, that are yet to be developed, could leverage Kubernetes, bare metal installation, Puppet, Vagrant, etc.</p> <p>This guide will run you through the process of enabling and disabling Ozone HIS components when using Docker Compose as the deployment mechanism.</p>"},{"location":"implementers/enabling-apps/#introducing-docker-compose-filestxt","title":"Introducing <code>docker-compose-files.txt</code>","text":"<p>This key configuration file in the Ozone Docker Compose project serves as the default inventory of the various Docker Compose files that will be run when launching Ozone HIS. Its default content may look like this:</p> <pre><code>docker-compose-common.yml\ndocker-compose-odoo.yml\ndocker-compose-openmrs.yml\ndocker-compose-senaite.yml\n</code></pre> <ul> <li>The <code>docker-compose-common.yml</code> file defines shared services and configurations that are used across the entire Ozone HIS Docker Compose setup. It includes common settings and dependencies needed by multiple components.</li> <li>The <code>docker-compose-odoo.yml</code> file handles spinning up Odoo, <code>docker-compose-openmrs.yml</code> takes care of OpenMRS, and <code>docker-compose-senaite.yml</code> is responsible for SENAITE.</li> </ul> <p>There will be a default Docker Compose file provided by Ozone for each supported component of the Ozone HIS FOSS ecosystem.</p>"},{"location":"implementers/enabling-apps/#overriding-docker-compose-filestxt","title":"Overriding <code>docker-compose-files.txt</code>","text":"<p>It is possible to define another setup than the Ozone default with your own version of <code>docker-compose-files.txt</code> that you would place here, where \"<code>ozone-gruzinia</code>\" is the top level folder of your distribution Maven project:</p> <pre><code>ozone-gruzinia\n    \u2514\u2500\u2500 scripts\n           \u2514\u2500\u2500 docker-compose-files.txt\n</code></pre> <p>When doing so, it will be your override file located in the <code>scripts</code> directory that will be taken into account, rather than the default file provided by Ozone Docker Compose. This allows you to enable or disable the HIS components of your choice by modifying your version of <code>docker-compose-files.txt</code>.</p> <p>For instance, the following setup would disable Odoo and use ERPNext as the ERP system within Ozone HIS:</p> <p>Changing the default ERP system to ERPNext in <code>docker-compose-files.txt</code></p> <pre><code>docker-compose-common.yml\ndocker-compose-erpnext.yml\ndocker-compose-openmrs.yml\ndocker-compose-senaite.yml\n</code></pre> <p>This was achieved by removing <code>docker-compose-odoo.yml</code> (disabling Odoo) and adding <code>docker-compose-erpnext.yml</code> (enabling ERPNext).</p> <p>OpenMRS Distro HIS with ERPNext</p> <p>The OpenMRS Distro HIS is a starter distribution of OpenMRS that demonstrates integration with other digital health software, such as an ERP system. It uses ERPNext instead of Odoo, which is Ozone's default ERP component. To achieve this, it overrides <code>docker-compose-files.txt</code> as described above.</p> <p>See here  how this is done.</p>"},{"location":"implementers/enabling-apps/#further-customizing-docker-compose-files-with-docker-compose-overrideyml","title":"Further customizing Docker Compose files with <code>docker-compose-override.yml</code>","text":"<p>It is also possible to provide an additional <code>docker-compose-override.yml</code><sup>1</sup> to tweak the default Docker Compose files provided by Ozone Docker Compose without modifying them directly. This pattern is crucial for ensuring that implementers can utilize the default Docker Compose files provided by Ozone as much as possible before needing to maintain their own versions of them.</p> <p>Adding a <code>docker-compose-override.yml</code> in <code>docker-compose-files.txt</code></p> <pre><code>docker-compose-common.yml\ndocker-compose-odoo.yml\ndocker-compose-openmrs.yml\ndocker-compose-senaite.yml\ndocker-compose-override.yml\n</code></pre>"},{"location":"implementers/enabling-apps/#examples-of-customizations-with-docker-compose-overrideyml","title":"Examples of customizations with <code>docker-compose-override.yml</code>","text":"<p>Adding OpenMRS frontend configuration files</p> <p>The OpenMRS Distro HIS requires to run its own configuration of the OpenMRS frontend. See here  how this can be done.</p> <p>Bespoke initialisation of OpenMRS' MySQL database</p> <p>This bespoke configuration ensures that the MySQL service starts with specific settings tailored for the KenyaHMIS project. It also initializes the database with necessary SQL scripts that update and configure the database schema and data according to the project\u2019s requirements.</p> <p>See here  how this can be done.</p> <ol> <li> <p>The YAML file name doesn't matter and can be chosen freely. Additionally, you can have as many additional Docker Compose files as desired.\u00a0\u21a9</p> </li> </ol>"},{"location":"implementers/intro/","title":"Introduction","text":"<p>This guide is divided into three sections, corresponding to a typical approach for assessing software and tools used in digital health interventions:</p> <pre><code>stateDiagram-v2\n    direction LR\n\n    classDef EvalClass fill:#FCF4E5\n    classDef AdoptClass fill:#B5C5E7\n    classDef DeployClass fill:#F5CAB3\n\n\n    state \"&lt;b&gt;1&lt;/b&gt; &amp;nbsp; Evaluate\" as eval\n    state \"&lt;b&gt;2&lt;/b&gt; &amp;nbsp; Adopt\" as adopt\n    state \"&lt;b&gt;3&lt;/b&gt; &amp;nbsp; Deploy\" as deploy\n\n    eval --&gt; adopt\n    adopt --&gt; deploy\n    deploy --&gt; adopt\n\n    class eval EvalClass\n    class adopt AdoptClass\n    class deploy DeployClass</code></pre> <p>Tip</p> <p>Use the left-hand menu to navigate the subguides and technical resources available under Evaluate, Adopt, and Deploy.</p>"},{"location":"implementers/intro/#1-evaluate","title":"1 \u00a0 Evaluate","text":"<p>First and foremost, it is important to evaluate what Ozone is and explore how it may look to end users. The easiest way to do this is by exploring the Ozone Demo. There are three immediate options:</p> <ul> <li>Browse the online  Pro demo  </li> <li>Run Ozone FOSS locally</li> <li>Run Ozone FOSS in Gitpod  </li> </ul> <p>We also recommend reaching out via our website to request a guided Ozone deep dive and demo.</p> <p>About the Ozone Demo</p> <p>The Ozone Demo is one opinionated example of a typical HIS implemented with Ozone. It serves to illustrate a realistic end-user experience, but does not represent the full range of outcomes and customizations possible with Ozone.</p>"},{"location":"implementers/intro/#2-adopt","title":"2 \u00a0 Adopt","text":"<p>Once you've confirmed Ozone is suitable for your project, the next step is to create your own customized copy (distribution) of Ozone. We provide a comprehensive toolkit to help implementers easily set up their own distribution. This custom distribution will initially inherit Ozone\u2019s defaults, and can be progressively configured and customized to your needs while continuing to benefit from the latest features and improvements from Ozone.</p>"},{"location":"implementers/intro/#3-deploy","title":"3 \u00a0 Deploy","text":"<p>Once your Ozone distribution is packaged and ready, you can deploy it to your servers. Ozone includes utility scripts to streamline deployment, built-in backup and restore capabilities, and integrated monitoring.</p> <p>Typically, you'll experience some iteration between \"Adopt\" and \"Deploy\"\u2014configuring, deploying, reviewing, and refining until your environment matches your needs.</p> <p>This section also provides troubleshooting tips and solutions to common deployment issues.</p>"},{"location":"implementers/logging/","title":"Logging","text":""},{"location":"implementers/logging/#logging","title":"Logging","text":"<p>Log analysis is crucial for monitoring, troubleshooting, and maintaining your Ozone deployment. This guide focuses on how to query and analyze logs from your Ozone services using Grafana and LogQL.</p>"},{"location":"implementers/logging/#overview","title":"Overview","text":"<p>Ozone comes with built-in centralized logging using Grafana Agent, Loki, and Grafana. All services output structured logs that are automatically collected and made available for querying and analysis through Grafana's interface.</p>"},{"location":"implementers/logging/#log-levels","title":"Log Levels","text":"<p>Ozone supports standard log levels that can be configured per service:</p> <ul> <li><code>ERROR</code> - Error conditions that need immediate attention</li> <li><code>WARN</code> - Warning conditions that should be monitored</li> <li><code>INFO</code> - General informational messages (default level)</li> <li><code>DEBUG</code> - Detailed diagnostic information</li> <li><code>TRACE</code> - Very detailed execution flow information</li> </ul>"},{"location":"implementers/logging/#accessing-logs","title":"Accessing Logs","text":""},{"location":"implementers/logging/#grafana-interface","title":"Grafana Interface","text":"<p>The primary way to access and query logs is through the Grafana interface:</p> <ol> <li>Navigate to Grafana - Usually available at <code>http://your-domain:3000</code></li> <li>Go to Explore - Click on the \"Explore\" section in the left menu  </li> <li>Select Loki - Choose Loki as your data source  </li> <li>Query logs - Use plain LogQL or the Query Builder to filter and analyze your logs</li> <li>Run Query - Click on <code>Run Query</code> to fetch the logs matching your query  </li> </ol>"},{"location":"implementers/logging/#log-structure-and-labels","title":"Log Structure and Labels","text":"<p>Ozone services output structured logs with consistent labeling for easy filtering and analysis:</p>"},{"location":"implementers/logging/#available-log-labels","title":"Available Log Labels","text":"<p>All log entries include these basic labels:</p> <ul> <li><code>container_name</code> - The name of the container generating the log</li> <li><code>job</code> - The logging job (typically \"containerlogs\")</li> </ul> Example: Filter Odoo logs only <p>This means that the first filter you can do in Grafana could be to filter by <code>container_name</code>. For instance, to explore the Odoo logs only:</p> <p>In LogQL, that would be: </p><pre><code>{container_name=\"his-dev-odoo-1\"}\n</code></pre> Using the Grafana Query Builder: <p> </p> <p>On top of the shared labels, each service will have its own set of labels.</p>"},{"location":"implementers/logging/#openmrs-logs","title":"OpenMRS Logs","text":"<p>OpenMRS in Ozone is configured to output structured JSON logs with detailed metadata:</p> <p>Example log line: </p><pre><code>{\n  \"timeMillis\": 1754965124179,\n  \"thread\": \"pool-2-thread-2\",\n  \"level\": \"WARN\",\n  \"loggerName\": \"org.openmrs.util.OpenmrsUtil\",\n  \"message\": \"Unable to find a runtime properties file at /openmrs/openmrs-runtime.properties\",\n  \"endOfBatch\": false,\n  \"loggerFqcn\": \"org.apache.logging.slf4j.Log4jLogger\",\n  \"contextMap\": {},\n  \"threadId\": 54,\n  \"threadPriority\": 5\n}\n</code></pre> <p>Available JSON fields for OpenMRS:</p> <ul> <li><code>timeMillis</code> - Log timestamp in milliseconds (epoch time)</li> <li><code>level</code> - Log level (<code>ERROR</code>, <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>, <code>TRACE</code>)</li> <li><code>loggerName</code> - Java logger class name</li> <li><code>thread</code> - Processing thread name</li> <li><code>message</code> - Log message content</li> <li><code>endOfBatch</code> - Indicates if this is the last log in a batch</li> <li><code>loggerFqcn</code> - Fully qualified class name of the logger</li> <li><code>contextMap</code> - Mapped Diagnostic Context with request/user data</li> <li><code>threadId</code> - Numeric thread identifier</li> <li><code>threadPriority</code> - Thread priority level</li> </ul>"},{"location":"implementers/logging/#eipcamel-logs","title":"EIP/Camel Logs","text":"<p>EIP services output structured JSON logs with integration-specific metadata:</p> <pre><code>{\n  \"@timestamp\": \"2025-08-08T11:26:54.391196959Z\",\n  \"@version\": \"1\",\n  \"message\": \"Polling Tasks completed.\",\n  \"logger_name\": \"poll-senaite\",\n  \"thread_name\": \"Camel (camel-1) thread #10 - CamelFhir\",\n  \"level\": \"INFO\",\n  \"level_value\": 20000\n}\n</code></pre> <p>Available JSON fields for EIP:</p> <ul> <li><code>@timestamp</code> - Log timestamp in ISO 8601 format</li> <li><code>@version</code> - Log format version</li> <li><code>level</code> - Log level (<code>ERROR</code>, <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>, <code>TRACE</code>)</li> <li><code>level_value</code> - Numeric log level value</li> <li><code>logger_name</code> - Logger identifier (often route or component name)</li> <li><code>thread_name</code> - Camel thread name with context information</li> <li><code>message</code> - Log message content</li> </ul>"},{"location":"implementers/logging/#odoo-logs","title":"Odoo Logs","text":"<p>Odoo is a Python-based ERP service that outputs plain text logs in a structured format:</p> <pre><code>2025-08-11 05:25:39,107 83 INFO odoo odoo.modules.registry: Registry loaded in 21.265s\n2025-08-11 05:25:39,106 83 INFO odoo odoo.addons.odoo_initializer.activator: initialization done\n2025-08-11 05:25:39,103 83 INFO odoo odoo.addons.odoo_initializer.utils.data_files_utils: Skipping already processed file: ir.ui.view.1000.csv\n</code></pre> <p>Odoo log format structure:</p> <ul> <li><code>YYYY-MM-DD HH:MM:SS,mmm</code> - Timestamp with milliseconds</li> <li><code>PID</code> - Process ID (e.g., 83)</li> <li><code>LEVEL</code> - Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</li> <li><code>database</code> - Database name (e.g., \"odoo\")</li> <li><code>module</code> - Python module/addon name</li> <li><code>message</code> - Log message content</li> </ul> <p>Note</p> <p>Note Odoo logs are plain text, not JSON. Use regular expression patterns for filtering.</p>"},{"location":"implementers/logging/#senaite-logs","title":"SENAITE Logs","text":"<p>SENAITE is a Python-based LIMS service that outputs mixed log formats:</p> <p>Python Application Logs: Example log line:</p> <pre><code>2025-08-11 05:42:15,744 INFO    [senaite.jsonapi:60][waitress-1] Catalog query={'getClientID': '72f979bb-f153-41bd-9ffc-03128197e9d6', 'portal_type': 'AnalysisRequest', 'sort_order': 'ascending', 'getClientSampleID': '1a58e113-ff32-4e62-867b-365ff7d0e41c'}\n</code></pre> <ul> <li><code>YYYY-MM-DD HH:MM:SS,mmm</code> - Timestamp with milliseconds</li> <li><code>LEVEL</code> - Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</li> <li><code>[module:line]</code> - Python module and line number</li> <li><code>[thread]</code> - Thread name (e.g., waitress-1)</li> <li><code>message</code> - Log message content</li> </ul> <p>Nginx Access Logs: Example log line: </p><pre><code>172.23.0.11 - admin [11/Aug/2025:05:42:15 +0000] \"GET /senaite/%40%40API/senaite/v1/AnalysisRequest?getClientSampleID=1a58e113-ff32-4e62-867b-365ff7d0e41c&amp;getClientID=72f979bb-f153-41bd-9ffc-03128197e9d6&amp;catalog=senaite_catalog_sample&amp;complete=true HTTP/1.1\" 200 6120 \"-\" \"Apache-HttpClient/5.2.1 (Java/17.0.16)\"\n</code></pre> <ul> <li>Standard Nginx Combined Log Format</li> <li><code>IP address</code>, <code>user</code>, <code>timestamp</code>, <code>request</code>, <code>status</code>, <code>size</code>, <code>referer</code>, <code>user-agent</code></li> </ul> <p>Note</p> <p>SENAITE logs are plain text, not JSON. Use regular expression patterns for filtering different log types.</p>"},{"location":"implementers/logging/#other-container-logs","title":"Other Container Logs","text":"<p>Services without structured JSON logging output standard container logs:</p> <ul> <li>Container name labeling for service identification</li> <li>Standard log levels and timestamps</li> <li>Plain text messages</li> </ul>"},{"location":"implementers/logging/#querying-logs-with-logql","title":"Querying Logs with LogQL","text":"<p>LogQL is Loki's query language for filtering and analyzing logs. This section provides practical examples for querying Ozone logs.</p>"},{"location":"implementers/logging/#query-structure","title":"Query Structure","text":"<p>All LogQL queries follow this basic structure:</p> <pre><code>{label_filters} | processing_stages | output_formatting\n</code></pre> <p>For Ozone logs, you'll typically start with container name filtering and then apply JSON parsing or regex matching depending on the service.</p> Basic Filtering on the <code>container_name</code> label <p></p><pre><code># All logs from OpenMRS container\n{container_name=\"ozone-openmrs-1\"}\n</code></pre> <pre><code># All logs from EIP containers\n{container_name=~\"ozone-eip-.*\"}\n</code></pre> <pre><code># All logs from specific Ozone services\n{container_name=~\"ozone-openmrs-1|ozone-odoo-1|ozone-senaite-1\"}\n</code></pre> JSON Log Parsing (OpenMRS &amp; EIP clients) <p>For services that output structured JSON logs.</p> <p>Always specify only the JSON fields you need (e.g., <code>json level</code> instead of <code>json</code>) to avoid high cardinality and improve query performance:</p> <p></p><pre><code># Filter OpenMRS logs by level\n{container_name=\"ozone-openmrs-1\"} | json level | level=\"error\"\n</code></pre> <pre><code># Filter by specific logger\n{container_name=\"ozone-openmrs-1\"} | json loggerName | loggerName=~\".*OpenmrsUtil.*\"\n</code></pre> <pre><code># Monitor specific thread activity\n{container_name=\"ozone-openmrs-1\"} | json thread | thread=\"pool-2-thread-2\"\n</code></pre> <pre><code># Database connection monitoring\n{container_name=\"ozone-openmrs-1\"} | json loggerName | loggerName=~\".*LocalContainerEntityManagerFactoryBean.*\"\n</code></pre> <pre><code># EIP integration monitoring\n{container_name=~\"ozone-eip-.*\"} | json logger_name | logger_name=\"poll-senaite\"\n</code></pre> <pre><code># Monitor Camel threads\n{container_name=~\"ozone-eip-.*\"} | json thread_name | thread_name=~\".*Camel.*\"\n</code></pre> Simple Line Filter (Odoo &amp; SENAITE) <p>For services that output plain text logs:</p> <p></p><pre><code># Filter Odoo logs by level\n{container_name=\"ozone-odoo-1\"} |~ \"ERROR|WARNING\"\n</code></pre> <pre><code># Monitor Odoo modules\n{container_name=\"ozone-odoo-1\"} |~ \"odoo\\\\.addons\\\\..*res_users\"\n</code></pre> <pre><code># SENAITE API monitoring\n{container_name=\"ozone-senaite-1\"} |~ \"GET /senaite/.*API\"\n</code></pre> <pre><code># Track SENAITE operations\n{container_name=\"ozone-senaite-1\"} |~ \"AnalysisRequest|getClientID\"\n</code></pre> Rate and Volume Queries <p>For monitoring error rates and log volume:</p> <p></p><pre><code># Error rate per minute by service\nrate({container_name=\"ozone-openmrs-1\"} | json level | level=\"error\"[1m])\n</code></pre> <pre><code>rate({container_name=~\"ozone-eip-.*\"} | json level | level=\"ERROR\"[1m])\n</code></pre> <pre><code>rate({container_name=\"ozone-odoo-1\"} |~ \"ERROR\"[1m])\n</code></pre> <pre><code>rate({container_name=\"ozone-senaite-1\"} |~ \"ERROR\"[1m])\n\n# Total log volume per minute\n</code></pre> <pre><code>rate({container_name=\"ozone-openmrs-1\"}[1m])\n</code></pre> <pre><code>rate({container_name=~\"ozone-eip-.*\"}[1m])\n</code></pre> <pre><code>rate({container_name=\"ozone-odoo-1\"}[1m])\n</code></pre> <pre><code>rate({container_name=\"ozone-senaite-1\"}[1m])\n</code></pre> Aggregation Queries <p>For counting and grouping log entries:</p> <p></p><pre><code># Count of log entries by service over 5 minute windows\nsum by (container_name) (count_over_time({container_name=~\"ozone-.*\"}[5m]))\n</code></pre> <pre><code># Count of errors by OpenMRS logger\nsum by (loggerName) (count_over_time({container_name=\"ozone-openmrs-1\"} | json loggerName, level | level=\"error\"[5m]))\n</code></pre> <pre><code># Count of EIP activities by component\nsum by (logger_name) (count_over_time({container_name=~\"ozone-eip-.*\"} | json logger_name | logger_name!=\"\"[5m]))\n</code></pre> <pre><code># Top log generating threads in OpenMRS\ntopk(5, sum by (thread) (count_over_time({container_name=\"ozone-openmrs-1\"} | json thread[5m])))\n</code></pre> <pre><code># Top error-generating threads in OpenMRS\ntopk(5, sum by (thread) (count_over_time({container_name=\"ozone-openmrs-1\"} | json thread, level | level=\"error\"[5m])))\n</code></pre> <pre><code># Count by log level across OpenMRS\nsum by (level) (count_over_time({container_name=\"ozone-openmrs-1\"} | json level[5m]))\n</code></pre> Time-based Analysis <p>For trending and historical analysis:</p> <p></p><pre><code># Error count over time windows\ncount_over_time({container_name=\"ozone-openmrs-1\"} | json level | level=\"error\"[5m])\n</code></pre> <pre><code># Integration poll activity trends\ncount_over_time({container_name=~\"ozone-eip-.*\"} | json logger_name | logger_name=~\".*poll.*\"[5m])\n</code></pre> <pre><code># Database activity over time\ncount_over_time({container_name=\"ozone-openmrs-1\"} | json loggerName | loggerName=~\".*hikari.*\"[5m])\n</code></pre> <pre><code># Error rate trends\nrate({container_name=\"ozone-openmrs-1\"} | json level | level=\"error\"[5m])\n</code></pre> <pre><code># Combined service activity over time\nsum(count_over_time({container_name=~\"ozone-.*\"}[5m])) by (container_name)\n</code></pre>"},{"location":"implementers/logging/#log-monitoring-and-alerting","title":"Log Monitoring and Alerting","text":""},{"location":"implementers/logging/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<p>Suggested patterns to monitor efficiently your logs and track system health:</p> <ol> <li>Error Rates: Track <code>ERROR</code> and <code>WARN</code> level logs across all services</li> <li>Performance: Monitor slow query logs and response times</li> <li>Authentication: Track login failures and security events  </li> <li>Integration: Monitor EIP message processing errors and timeouts</li> <li>Database: Watch for connection pool exhaustion and deadlocks</li> <li>Camel Routes: Monitor route failures and processing delays</li> </ol>"},{"location":"implementers/logging/#logql-queries-tips-and-best-practices","title":"LogQL Queries Tips and Best Practices","text":""},{"location":"implementers/logging/#query-optimization","title":"Query Optimization","text":"<ol> <li>Start with container filters - Always begin queries with container name filters to reduce search scope</li> <li>Use specific time ranges - Limit queries to relevant time periods for better performance  </li> <li>Combine filters efficiently - Use JSON pipe after initial filtering to minimize processing</li> <li>Leverage regex patterns - Use regex for flexible pattern matching in log messages</li> </ol> <p>EIP Integration Monitoring</p> <p>Use EIP logs with <code>route_id</code> and <code>exchange_id</code> labels to trace individual message flows through your integration pipelines.</p> <p>Performance Monitoring</p> <p>Combine structured logging with Grafana metrics and APM tools for comprehensive system observability.</p> <p>Label Management</p> <p>Keep Loki labels minimal and use JSON pipe for detailed filtering. High cardinality labels can significantly impact Loki performance.</p>"},{"location":"implementers/logging/#alternative-directly-accessing-logs-using-docker-cli","title":"Alternative: Directly accessing logs using Docker CLI","text":"<p>As an alternative (if you are not running the logging service or just require quick access) you can still access logs directly in the terminal:</p> <p></p><pre><code># View logs for a specific service\ndocker-compose -p &lt;ozone&gt; logs openmrs\n</code></pre> <pre><code># Follow logs in real-time\ndocker-compose -p &lt;project&gt; logs -f\n</code></pre> <pre><code># Limit log output\ndocker-compose -p &lt;project&gt; logs --tail=100 openmrs\n</code></pre> <pre><code># Display the 500 last log lines of a particular container and prettify the output when in JSON format\ndocker logs -f --tail=500 &lt;container_name&gt; | jq -R -M '(fromjson? // .)'\n</code></pre>"},{"location":"implementers/monitor/","title":"Monitor","text":""},{"location":"implementers/ozone-demo/","title":"<span style='color:36464e'>The Ozone Demo","text":"<p>The Ozone Demo is an opinionated showcase of a typical HIS built using Ozone.</p> <p>It offers a realistic view of the end-user experience, but doesn't cover the full range of customizations and possibilities available for addressing specific real-world use cases.</p> <p>We have created a Getting Started guide to help you explore the demo through:</p> <ul> <li>Browsing the online  Pro demo</li> <li>Running Ozone FOSS locally</li> <li>Running Ozone FOSS in Gitpod</li> </ul> <p>\u2193 Next step \u2193</p> <p>\u26a1\ufe0f Open the Getting Started section to continue. \u26a1\ufe0f</p> <p>When you're ready, return to these Implementer docs to learn how to further adopt and customize Ozone for your specific needs.</p>"},{"location":"implementers/specs/","title":"Software &amp; Hardware Requirements","text":""},{"location":"implementers/start-stop/","title":"Start & Stop","text":""},{"location":"implementers/start-stop/#build","title":"Build","text":"<p>Build your distribution using Maven:</p> <pre><code>mvn clean package\n</code></pre> Alernative with Maven Wrapper <p>You can use Maven Wrapper if Maven is not installed on your machine: </p><pre><code>./scripts/mvnw clean package\n</code></pre>"},{"location":"implementers/start-stop/#run","title":"Run","text":"<p>First, move the directory where the run scripts are located: </p><pre><code>source target/go-to-scripts-dir.sh\n</code></pre> <p>Run your Ozone distribution locally with SSO enabled and some demo data. </p><pre><code>./start-demo-with-sso.sh\n</code></pre> <p>Info</p> <ul> <li> <p>Without SSO: </p><pre><code>./start-demo.sh\n</code></pre> </li> <li> <p>Without demo data:  </p><pre><code>./start-with-sso.sh\n</code></pre> </li> </ul>"},{"location":"implementers/start-stop/#browse","title":"Browse","text":"<p>Once started, the script will output the URLs to access the HIS apps and services:</p> <p>For example:</p> <p></p> <p>Accessing any of those URLs should present you the Single Sign-On portal page:</p> <p></p> <p>Log in to the demo using username jdoe and password password.</p> <p>You're ready to start browsing Ozone \ud83d\udc4f !</p> <p>\ud83d\udee0\ufe0f If you encounter an error when trying to access OpenMRS specifically, you may need to apply the following command to force a restart of the OpenMRS service. </p><pre><code>docker restart ozone-openmrs-1\n</code></pre>"},{"location":"implementers/start-stop/#stop-or-destroy","title":"Stop or Destroy","text":"<p>Once you're done browsing Ozone, you can destroy the server to keep your environment clean.</p> <pre><code>./destroy-demo.sh\n</code></pre> <p>You can also just stop it, without destroying it:</p> <pre><code>./stop-demo.sh\n</code></pre>"},{"location":"implementers/start-stop/#limitations","title":"Limitations","text":"<p>'start.sh'  is not suitable for production</p> <p>The scripts described on this page are not intended for production use. They are provided as utility tools to help implementers quickly run Ozone in a development environment, whether locally or in the cloud. To simplify setup, these scripts include default values for runtime options that would normally require customization in production, such as JVM settings, backup configurations, certificates and more.</p>"},{"location":"implementers/troubleshoot/","title":"Troubleshoot","text":""},{"location":"users/","title":"Overview","text":"<p>This section of the Ozone Docs is tailored for digital health decision-makers and business analysts, detailing Ozone's functionalities and highlighting its benefits for end users of health information systems and integrated digital health software.</p>"},{"location":"users/#overview","title":"Overview","text":"<p>Ozone is an easy-to-install growing suite of digital health apps, integrated by a scalable interoperability framework delivering a complete health information system experience.</p> <pre><code>stateDiagram-v2\n    state \"Ozone HIS\" as ozone\n    state \"digital health apps\" as state1\n    state \"interoperability framework\" as state2\n\n    state1 --&gt; ozone\n    state2 --&gt; ozone</code></pre>"},{"location":"users/#1-a-suite-of-opt-inout-digital-health-apps","title":"1 \u00a0 A suite of opt in/out digital health apps","text":"<p>Ozone is a ready-to-use solution, providing a pre-selected array of FOSS<sup>1</sup> apps that function seamlessly together.</p> <p>It is a complete health information system allowing users to customize it by choosing which supported digital health software to include or exclude:</p>"},{"location":"users/#ozone-his-apps","title":"Ozone HIS apps","text":"<p> <code>1.0.0-alpha.13</code></p> Area App Version in Ozone Maturity in Ozone EMR  OpenMRS <code>3.2.1</code>  Core LIMS SENAITE <code>2.5.0</code>  Core ERP Odoo <code>14</code>  Core ERP  ERPNext <code>15.12.2</code>  Legacy BI  Apache Superset <code>4.0.1</code>  Core IdP  JBoss Keycloak <code>22.0.5</code>  Core PACS Orthanc <code>1.12.6</code>  Core"},{"location":"users/#maturity-levels-in-ozone","title":"Maturity levels in Ozone","text":"<ul> <li> Core \u2013 Core apps are fully supported in Ozone. They are regularly upgraded with new Ozone versions, with their data flows within the HIS maintained to ensure seamless upgrades and backward compatibility.</li> <li> Legacy \u2013 Legacy apps and their data flows were introduced in a specific version of Ozone but are no longer actively maintained beyond that version. They remain available \"as is\" for continued use without further updates.</li> </ul> <p>Ozone Pro markers</p> <p>Features and sections exclusive to Ozone Pro are marked with \u00a0\u00a0 Pro.</p>"},{"location":"users/#criteria-for-inclusion","title":"Criteria for inclusion","text":"<p>As Ozone continues to expand its suite of software apps, several criteria must be met for an app to be included in the Ozone ecosystem. Below, we outline these requirements by order of importance:</p> Criterion Requirement  Open-source Must Ozone is FOSS under MPL 2.0. Closed-source software is accommodated within the Pro edition of Ozone or through custom developments.  Released version Must Ozone supports HIS flows between versioned software apps with stable and, ideally, well-documented APIs.  OAuth 2 Must OAuth2 is required for enhanced security and to implement SSO within the Ozone HIS.  Security updates Must Must undergo regular security audits (e.g. pen tests) and have a clear process for broadcasting the availability of security updates.  Docker image Should Docker, while not the sole deployment mechanism supported, is currently the default one in Ozone HIS.  Automated configurability Should Apps should be configurable through deployment processes, allowing for automated setup and initialization (specifically of master data) by placing configuration files in the appropriate locations.  Health check Should It is crucial that each app includes a web endpoint to let Ozone verify it is operational within the HIS.  Privacy &amp; Legal Compliance Should Should comply with relevant privacy, domestic, and applicable international laws. This may include data protection regulations.  Prometheus metrics Should Providing Prometheus metrics is recommended to enhance monitoring and ensure effective system performance management.  Backup &amp; restore Should Automated backup and restore capabilities ensure data integrity and system resilience in production use.  Internationalization Should Internationalization should be a first class citizen for any software. It ensures that it can be easily adapted to various languages and regions, making it accessible and usable by a global audience.  Modularity Should Modularitiy enables potential enhancements or modifications to be made via modules, plugins, or addons without affecting the core software of the app.  HL7 FHIR API Should Providing HL7 FHIR API reduces development overhead for point-to-point apps routes within the Ozone HIS.  Event bus Could An event bus offers a more efficient method of dispatching information as it becomes available, eliminating the need for polling."},{"location":"users/#2-an-interoperability-framework","title":"2 \u00a0 An interoperability framework","text":"<p>Ozone is powered by an interoperability EIP<sup>2</sup> framework that orchestrates seamless data flows between health information system apps \u2014 EMR, LIMS, pharmacy, accounting, BI, and more.</p> <p>Sample data flows</p> <p>Clinicians' drug orders in the EMR system automatically generate items on the patient bill.</p> <p>Lab results entered into the LIMS by lab staff are immediately visible to clinicians in the EMR system.</p> <p>Data analysts can perform real-time cross-analysis of clinical and billing data on the BI platform.</p>"},{"location":"users/#what-ozone-is-not","title":"What Ozone is not","text":"<p>Ozone is not a fork of other open-source projects; it utilizes standard and officially released software apps from various open-source communities.</p> <p>Ozone packages the latest LTS<sup>3</sup> versions of its apps 'as-is'. Therefore it is not liable for any bugs, deficiencies, or performance issues in the bundled LTS versions of its apps; these fall outside the purview of Ozone itself.</p> <p>Tip</p> <p>We generally do not document Ozone\u2019s apps. Instead we refer to their own official documentation as much as possible.</p> <ol> <li> <p>Free and open-source software\u00a0\u21a9</p> </li> <li> <p>Entreprise integration patterns\u00a0\u21a9</p> </li> <li> <p>Long-term support\u00a0\u21a9</p> </li> </ol>"},{"location":"users/auth/","title":"<span style='color:#b0b0b0;font-style:italic'>SSO & Auth</span>","text":""},{"location":"users/auth/#authentication-and-authorisation","title":"Authentication and Authorisation","text":""},{"location":"users/auth/#single-sign-on","title":"Single Sign-On","text":"<p> Pro</p>"},{"location":"users/auth/#central-authorisation","title":"Central Authorisation","text":""},{"location":"users/erpnext-openmrs/","title":"ERPNext\u2013OpenMRS Flows","text":""},{"location":"users/erpnext-openmrs/#erpnext-openmrs-flows","title":"ERPNext-OpenMRS Flows","text":""},{"location":"users/erpnext-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant ERPNext\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;ERPNext: Customers\n        OpenMRS-&gt;&gt;Ozone: Visits\n        OpenMRS-&gt;&gt;Ozone: Drug orders\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;ERPNext: Quotations\n        Ozone-&gt;&gt;ERPNext: Quotation items</code></pre>"},{"location":"users/erpnext-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 ERPNext Customer OpenMRS Visit \u2192 ERPNext Quotation OpenMRS Billable item \u2b46 ERPNext Quotation OpenMRS Billable item \u2192 ERPNext Quotation item <p>What are the OpenMRS billable items?</p> <p>The supported billable items are:</p> <ul> <li>OpenMRS drug orders</li> <li>OpenMRS lab test orders</li> </ul>"},{"location":"users/erpnext-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/erpnext-openmrs/#1-openmrs-patient-erpnext-customer","title":"1 \u00a0 OpenMRS Patient \u2192 ERPNext Customer","text":"<p>A patient in OpenMRS is synchronized as a corresponding customer in ERPNext.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"ERPNext customer\"]</code></pre> <p>Options</p> <p>default option \u00a0 An OpenMRS patient is synchronised as an ERPNext customer when the first billable item is ordered from OpenMRS.</p> <p>option 1 \u00a0 An OpenMRS patient is always synchronised as an ERPNext customer.</p>"},{"location":"users/erpnext-openmrs/#2-openmrs-visit-erpnext-quotation","title":"2 \u00a0 OpenMRS Visit \u2192 ERPNext Quotation","text":"<p>A new draft ERPNext quotation is linked with an OpenMRS patient's visit as soon as the first billable item is ordered during that visit.</p> <p>Eventually, ending a patient's visit in OpenMRS submits the draft ERPNext quotation linked with this visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS visit\"]-- 1-to-1 --&gt;b[\"ERPNext quotation\"]</code></pre>"},{"location":"users/erpnext-openmrs/#3-openmrs-billable-items-erpnext-quotation","title":"3 \u00a0 OpenMRS Billable Items \u2b46 ERPNext Quotation","text":"<p>As soon as the first billable item is ordered for a patient in OpenMRS a draft quotation is created in ERPNext for the ERPNext customer corresponding to that patient, furthermore the quotation is linked with the OpenMRS patient's visit.</p> <p>All billable items ordered for a patient within the same OpenMRS visit are added to the draft ERPNext quotation linked with this OpenMRS visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable items\"]-- many-to-1 --&gt;b[\"ERPNext quotation\"]</code></pre>"},{"location":"users/erpnext-openmrs/#4-openmrs-billable-item-erpnext-quotation-item","title":"4 \u00a0 OpenMRS Billable Item \u2192 ERPNext Quotation Item","text":"<p>Each billable item ordered in OpenMRS during a patient's visit is synchronized in ERPNext as a quotation item in the corresponding customer's draft quotation that is linked with the OpenMRS patient's visit.</p> <p>When a drug or lab test order is discontinued for a patient in OpenMRS, the corresponding quotation item is removed from the related ERPNext quotation.</p> <p>If all quotation items are removed from a quotation, the quotation is marked as cancelled.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable item\"]-- 1-to-1 --&gt;b[\"ERPNext quotation item\"]</code></pre>"},{"location":"users/keycloak-odoo/","title":"Keycloak-Odoo Flows","text":""},{"location":"users/keycloak-odoo/#keycloak-odoo-flows","title":"Keycloak-Odoo Flows","text":""},{"location":"users/keycloak-odoo/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant Odoo\n        participant Ozone\n        participant Keycloak\n        Odoo-&gt;&gt;Ozone: Roles\n        Ozone-&gt;&gt;Keycloak: Roles</code></pre>"},{"location":"users/keycloak-odoo/#flows-list","title":"Flows List","text":"Source Element Target Element Odoo Role \u2192 Keycloak Role Odoo Roles \u229d Keycloak Role"},{"location":"users/keycloak-odoo/#flows-details","title":"Flows Details","text":""},{"location":"users/keycloak-odoo/#1-odoo-role-keycloak-role","title":"1 \u00a0 Odoo Role \u2192 Keycloak Role","text":"<p>A role in Odoo is synchronized as a role in Keycloak under the 'odoo' client.</p> <pre><code>flowchart LR\n    a[\"Odoo role\"]-- 1-to-1 --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-odoo/#2-odoo-roles-keycloak-role","title":"2 \u00a0 Odoo Roles \u229d Keycloak Role","text":"<p>Keycloak roles under the 'odoo' client that do not exist in Odoo are periodically deleted.</p> <pre><code>flowchart LR\n    a[\"Odoo roles\"]-- delete --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-openmrs/","title":"Keycloak-OpenMRS Flows","text":"<p> Pro</p>"},{"location":"users/keycloak-openmrs/#keycloak-openmrs-flows","title":"Keycloak-OpenMRS Flows","text":""},{"location":"users/keycloak-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant Keycloak\n        OpenMRS-&gt;&gt;Ozone: Roles\n        Ozone-&gt;&gt;Keycloak: Roles</code></pre>"},{"location":"users/keycloak-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Role \u2192 Keycloak Role OpenMRS Roles \u229d Keycloak Role"},{"location":"users/keycloak-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/keycloak-openmrs/#1-openmrs-role-keycloak-role","title":"1 \u00a0 OpenMRS Role \u2192 Keycloak Role","text":"<p>A role in OpenMRS is synchronized as a role in Keycloak under the 'openmrs' client.</p> <pre><code>flowchart LR\n    a[\"OpenMRS role\"]-- 1-to-1 --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-openmrs/#2-openmrs-roles-keycloak-role","title":"2 \u00a0 OpenMRS Roles \u229d Keycloak Role","text":"<p>Keycloak roles under the 'openmrs' client that do not exist in OpenMRS are periodically deleted.</p> <pre><code>flowchart LR\n    a[\"OpenMRS roles\"]-- delete --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-superset/","title":"Keycloak-Superset Flows","text":"<p> Pro</p>"},{"location":"users/keycloak-superset/#keycloak-superset-flows","title":"Keycloak-Superset Flows","text":""},{"location":"users/keycloak-superset/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant Superset\n        participant Ozone\n        participant Keycloak\n        Superset-&gt;&gt;Ozone: Roles\n        Ozone-&gt;&gt;Keycloak: Roles</code></pre>"},{"location":"users/keycloak-superset/#flows-list","title":"Flows List","text":"Source Element Target Element Superset Role \u2192 Keycloak Role Superset Roles \u229d Keycloak Role"},{"location":"users/keycloak-superset/#flows-details","title":"Flows Details","text":""},{"location":"users/keycloak-superset/#1-superset-role-keycloak-role","title":"1 \u00a0 Superset Role \u2192 Keycloak Role","text":"<p>A role in Superset is synchronized as a role in Keycloak under the 'superset' client.</p> <pre><code>flowchart LR\n    a[\"Superset role\"]-- 1-to-1 --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-superset/#2-superset-roles-keycloak-role","title":"2 \u00a0 Superset Roles \u229d Keycloak Role","text":"<p>Keycloak roles under the 'superset' client that do not exist in Superset are periodically deleted.</p> <pre><code>flowchart LR\n    a[\"Superset roles\"]-- delete --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/odoo-openmrs/","title":"Odoo\u2013OpenMRS Flows","text":""},{"location":"users/odoo-openmrs/#odoo-openmrs-flows","title":"Odoo-OpenMRS Flows","text":""},{"location":"users/odoo-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant Odoo\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;Odoo: Customers\n        OpenMRS-&gt;&gt;Ozone: Visits\n        OpenMRS-&gt;&gt;Ozone: Drug orders\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;Odoo: Quotations\n        Ozone-&gt;&gt;Odoo: Order Lines</code></pre>"},{"location":"users/odoo-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 Odoo Customer OpenMRS Visit \u2192 Odoo Quotation OpenMRS Billable item \u2b46 Odoo Quotation OpenMRS Billable item \u2192 Odoo Order line <p>What are the OpenMRS billable items?</p> <p>The supported billable items are:</p> <ul> <li>OpenMRS drug orders</li> <li>OpenMRS lab test orders</li> </ul>"},{"location":"users/odoo-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/odoo-openmrs/#1-openmrs-patient-odoo-customer","title":"1 \u00a0 OpenMRS Patient \u2192 Odoo Customer","text":"<p>A patient in OpenMRS is synchronized as a corresponding customer in Odoo.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"Odoo customer\"]</code></pre> <p>Options</p> <p>default option \u00a0 An OpenMRS patient is synchronised as an Odoo customer when the first billable item is ordered from OpenMRS.</p> <p>option 1 \u00a0 An OpenMRS patient is always synchronised as an Odoo customer.</p>"},{"location":"users/odoo-openmrs/#2-openmrs-visit-odoo-quotation","title":"2 \u00a0 OpenMRS Visit \u2192 Odoo Quotation","text":"<p>A new Odoo quotation is linked with an OpenMRS patient's visit as soon as the first billable item is ordered during that visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS visit\"]-- 1-to-1 --&gt;b[\"Odoo quotation\"]</code></pre>"},{"location":"users/odoo-openmrs/#3-openmrs-billable-items-odoo-quotation","title":"3 \u00a0 OpenMRS Billable Items \u2b46 Odoo Quotation","text":"<p>As soon as the first billable item is ordered for a patient in OpenMRS, a quotation is created in Odoo for the Odoo customer corresponding to that patient. Furthermore the quotation is linked with the OpenMRS patient's visit.</p> <p>All billable items ordered for a patient within the same OpenMRS visit are added to the Odoo quotation linked with this OpenMRS visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable items\"]-- many-to-1 --&gt;b[\"Odoo quotation\"]</code></pre>"},{"location":"users/odoo-openmrs/#4-openmrs-billable-item-odoo-order-line","title":"4 \u00a0 OpenMRS Billable Item \u2192 Odoo Order Line","text":"<p>Each billable item ordered in OpenMRS during a patient's visit is synchronized in Odoo as an order line in the corresponding customer's quotation that is linked with the OpenMRS patient's visit.</p> <p>When a drug or lab test order is discontinued for a patient in OpenMRS, the corresponding order line is removed from the related Odoo quotation.</p> <p>If all order lines are removed from a quotation, the quotation is marked as cancelled.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable item\"]-- 1-to-1 --&gt;b[\"Odoo order line\"]</code></pre>"},{"location":"users/openmrs-orthanc/","title":"OpenMRS-Orthanc Flows","text":""},{"location":"users/openmrs-orthanc/#openmrs-orthanc-flows","title":"OpenMRS-Orthanc Flows","text":""},{"location":"users/openmrs-orthanc/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant Orthanc\n        Orthanc-&gt;&gt;Ozone: Study\n        Orthanc-&gt;&gt;Ozone: Series\n        Orthanc-&gt;&gt;Ozone: Instance\n        Ozone-&gt;&gt;OpenMRS: Attachment</code></pre>"},{"location":"users/openmrs-orthanc/#flows-list","title":"Flows List","text":"Source Element Target Element Orthanc Study \u2192 OpenMRS Attachment Orthanc Series \u2b46 OpenMRS Attachment Orthanc Instance \u2b46 OpenMRS Attachment <p>What is an OpenMRS attachment?</p> <p>In OpenMRS, an attachment is any file associated with a patient\u2019s medical record. Attachments typically include files such as images or PDFs to which users can add titles and descriptions. Internally, attachments are managed as a special type of observation (<code>Obs</code> in the OpenMRS data model) that stores complex data (generally the binaries of the file itself).</p>"},{"location":"users/openmrs-orthanc/#flows-details","title":"Flows Details","text":"<p>An Orthanc imaging study consists of multiple series of image instances. In this lightweight integration, one image instance from the study is selected to serve as a simplified reference within OpenMRS. The selected instance is then saved as an attachment in OpenMRS.</p> <p>Its description contains a direct link to the complete imaging study hosted in Orthanc.</p>"},{"location":"users/openmrs-orthanc/#1-orthanc-study-openmrs-attachment","title":"1 \u00a0 Orthanc Study \u2192 OpenMRS Attachment","text":"<p>This data flow synchronizes each Orthanc imaging study to an attachment (<code>Obs</code>) in the patient's OpenMRS record. Each attachment includes a soft reference to the originating imaging study by storing the study's URL in its description (the attachment's file caption).</p> <pre><code>flowchart LR\n    a[\"Orthanc imaging study\"]-- 1-to-1 --&gt;b[\"OpenMRS attachment\"]</code></pre>"},{"location":"users/openmrs-orthanc/#2-orthanc-series-openmrs-attachment","title":"2 \u00a0 Orthanc Series \u2b46 OpenMRS Attachment","text":"<p>In this implicit secondary flow, the image instance used for the OpenMRS attachment is selected from the first series within the Orthanc imaging study.</p> <pre><code>flowchart LR\n    a[\"Orthanc series\"]-- many-to-1 --&gt;b[\"OpenMRS attachment\"]</code></pre>"},{"location":"users/openmrs-orthanc/#3-orthanc-instance-openmrs-attachment","title":"3 \u00a0 Orthanc Instance \u2b46 OpenMRS Attachment","text":"<p>In this implicit secondary flow, the first image instance from the first series of the Orthanc imaging study is selected for use as the OpenMRS attachment.</p> <pre><code>flowchart LR\n    a[\"Orthanc Instance\"]-- many-to-1 --&gt;b[\"OpenMRS attachment\"]</code></pre>"},{"location":"users/openmrs-senaite/","title":"OpenMRS-SENAITE Flows","text":""},{"location":"users/openmrs-senaite/#openmrs-senaite-flows","title":"OpenMRS-SENAITE Flows","text":""},{"location":"users/openmrs-senaite/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant SENAITE\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;SENAITE: Clients\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;SENAITE: Analysis requests\n        SENAITE-&gt;&gt;Ozone: Analyses\n        Ozone-&gt;&gt;OpenMRS: Lab results</code></pre>"},{"location":"users/openmrs-senaite/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 SENAITE Client OpenMRS Lab test order \u2192 SENAITE Analysis request SENAITE Analyses \u2b46 OpenMRS Lab results bundle <p>What is an OpenMRS lab results bundle?</p> <p>Lab results are represented in OpenMRS as observations (obs). A lab results bundle is a set of OpenMRS obs that can be either free-text, numeric or coded data types.</p>"},{"location":"users/openmrs-senaite/#flows-details","title":"Flows Details","text":""},{"location":"users/openmrs-senaite/#1-openmrs-patient-senaite-client","title":"1 \u00a0 OpenMRS Patient \u2192 SENAITE Client","text":"<p>A patient in OpenMRS is synchronized as a corresponding client in SENAITE.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"SENAITE client\"]</code></pre>"},{"location":"users/openmrs-senaite/#2-openmrs-lab-test-order-senaite-analysis-request","title":"2 \u00a0 OpenMRS Lab Test Order \u2192 SENAITE Analysis Request","text":"<p>As soon as a lab test is first ordered for a patient in OpenMRS, an analysis request is created in SENAITE for the corresponding client.</p> <pre><code>flowchart LR\n    a[\"OpenMRS lab test order\"]-- many-to-1 --&gt;b[\"SENAITE analysis request\"]</code></pre>"},{"location":"users/openmrs-senaite/#3-senaite-analyses-openmrs-lab-results-bundle","title":"3 \u00a0 SENAITE Analyses \u2b46 OpenMRS Lab Results Bundle","text":"<p>When an analysis request's analyses (or lab results) have been submitted, verified and published in SENAITE, the lab results bundle is saved into OpenMRS as an array of obs.</p> <pre><code>flowchart LR\n    a[\"SENAITE analyses\"]-- many-to-1 --&gt;b[\"OpenMRS lab results bundle\"]</code></pre>"},{"location":"users/ozoneflows/","title":"Ozone Flows Guide","text":""},{"location":"users/ozoneflows/#ozone-flows-guide","title":"Ozone Flows Guide","text":"<p>The following pages describe the data flows orchestrated by Ozone HIS among its supported apps. These flows are fundamental to Ozone's functionality, as they leverage and integrate existing software within the HIS to provide enhanced features that are not available when these apps are used independently.</p> <p>Flows are documented by pairs of apps, such as:</p> <ul> <li>Flows between ERPNext and OpenMRS.</li> <li>Flows between OpenMRS and SENAITE.</li> <li>Etc.</li> </ul>"},{"location":"users/ozoneflows/#flows-documentation-structure","title":"Flows Documentation Structure","text":"<p>The structure of each flows documentation page is typically organized as follows (unless unnecessary or impractical), for each pair of apps: flows overview, flows list and flows details.</p>"},{"location":"users/ozoneflows/#1-flows-overview","title":"1 \u00a0 Flows Overview","text":"<p>This section includes a sequence diagram that illustrates the high-level exchanges between two apps that are facilitated through Ozone. Eg.:</p> <pre><code>    sequenceDiagram\n        participant Odoo\n        participant Ozone\n        participant openIMIS\n        Odoo-&gt;&gt;Ozone: Invoices lines\n        Ozone-&gt;&gt;openIMIS: Claim Items\n        openIMIS-&gt;&gt;Ozone: Payments\n        Ozone-&gt;&gt;Odoo: Payments</code></pre>"},{"location":"users/ozoneflows/#2-flows-list","title":"2 \u00a0 Flows List","text":"<p>A table that presents an inventory of all the flows between source data elements and target data elements, including the type of relatonship between the source data element and the target data element for each flow. Eg.:</p> Source Element Target Element Odoo Customers \u2b46 openIMIS Household Odoo Invoice line \u2192 openIMIS Claim item openIMIS Payment \u2192 Odoo Payment <p>Types of flows</p> <ul> <li>one-to-one \u00a0 \u2192</li> <li>many-to-one \u00a0 \u2b46</li> <li>deletion  \u00a0 \u229d</li> </ul>"},{"location":"users/ozoneflows/#3-flows-details","title":"3 \u00a0 Flows Details","text":"<p>In this section, each flow is described in detail, providing plain English explanations of the functional intent and outlining the various options available for each flow, where applicable.</p>"}]}